//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DemoEFDAL
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class EMSEntities : DbContext
    {
        public EMSEntities()
            : base("name=EMSEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AssignmentTable> AssignmentTables { get; set; }
        public virtual DbSet<AssignmentTable_Copy> AssignmentTable_Copy { get; set; }
        public virtual DbSet<FormattedScrappedData> FormattedScrappedDatas { get; set; }
        public virtual DbSet<LoginTable> LoginTables { get; set; }
        public virtual DbSet<NotificationTable> NotificationTables { get; set; }
        public virtual DbSet<ProjectBudgetDetail> ProjectBudgetDetails { get; set; }
        public virtual DbSet<ResetPasswordActivity> ResetPasswordActivities { get; set; }
        public virtual DbSet<ResourceMapping> ResourceMappings { get; set; }
        public virtual DbSet<ScheduleReport_Projects> ScheduleReport_Projects { get; set; }
        public virtual DbSet<ScheduleReport_ResourceDetails> ScheduleReport_ResourceDetails { get; set; }
        public virtual DbSet<ScheduleReport_Updates> ScheduleReport_Updates { get; set; }
        public virtual DbSet<SubTaskTable> SubTaskTables { get; set; }
        public virtual DbSet<Task_TaskWithEsimatesBridgeTable> Task_TaskWithEsimatesBridgeTable { get; set; }
        public virtual DbSet<TaskNotFoundTable> TaskNotFoundTables { get; set; }
        public virtual DbSet<TaskOwnerTable> TaskOwnerTables { get; set; }
        public virtual DbSet<TaskTableWithEstimate> TaskTableWithEstimates { get; set; }
        public virtual DbSet<TaskType> TaskTypes { get; set; }
        public virtual DbSet<TimeSheet> TimeSheets { get; set; }
        public virtual DbSet<TimeSheetDetail> TimeSheetDetails { get; set; }
        public virtual DbSet<UrlShortnerLoginUser> UrlShortnerLoginUsers { get; set; }
        public virtual DbSet<URLShortnerMappingAttributeDetail> URLShortnerMappingAttributeDetails { get; set; }
        public virtual DbSet<URLShortnerMappingTable> URLShortnerMappingTables { get; set; }
        public virtual DbSet<URLShortnerUserDomain> URLShortnerUserDomains { get; set; }
        public virtual DbSet<UserNotification> UserNotifications { get; set; }
        public virtual DbSet<UserProfile> UserProfiles { get; set; }
        public virtual DbSet<UtilityProcedureExecutionTable> UtilityProcedureExecutionTables { get; set; }
        public virtual DbSet<UtilityRunningTime> UtilityRunningTimes { get; set; }
        public virtual DbSet<LinksTable> LinksTables { get; set; }
        public virtual DbSet<MainTaskTable> MainTaskTables { get; set; }
        public virtual DbSet<TaskTableCopy> TaskTableCopies { get; set; }
        public virtual DbSet<Setting> Settings { get; set; }
        public virtual DbSet<ProjectTable> ProjectTables { get; set; }
        public virtual DbSet<ClientTable> ClientTables { get; set; }
        public virtual DbSet<DepartmentTable> DepartmentTables { get; set; }
        public virtual DbSet<UserProfileTable> UserProfileTables { get; set; }
        public virtual DbSet<DepartmentMapping> DepartmentMappings { get; set; }
        public virtual DbSet<TaskTable> TaskTables { get; set; }
    
        public virtual ObjectResult<GetSetting_Result> GetSetting(string settingName)
        {
            var settingNameParameter = settingName != null ?
                new ObjectParameter("SettingName", settingName) :
                new ObjectParameter("SettingName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSetting_Result>("GetSetting", settingNameParameter);
        }
    
        public virtual ObjectResult<GetUserlist_Result> GetUserlist(string loginName)
        {
            var loginNameParameter = loginName != null ?
                new ObjectParameter("LoginName", loginName) :
                new ObjectParameter("LoginName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUserlist_Result>("GetUserlist", loginNameParameter);
        }
    
        public virtual int InsertUserlist(Nullable<int> iD, string nAME, string pASSWORD, string iSACTIVE, string rOLE, string fULLNAME)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nAMEParameter = nAME != null ?
                new ObjectParameter("NAME", nAME) :
                new ObjectParameter("NAME", typeof(string));
    
            var pASSWORDParameter = pASSWORD != null ?
                new ObjectParameter("PASSWORD", pASSWORD) :
                new ObjectParameter("PASSWORD", typeof(string));
    
            var iSACTIVEParameter = iSACTIVE != null ?
                new ObjectParameter("ISACTIVE", iSACTIVE) :
                new ObjectParameter("ISACTIVE", typeof(string));
    
            var rOLEParameter = rOLE != null ?
                new ObjectParameter("ROLE", rOLE) :
                new ObjectParameter("ROLE", typeof(string));
    
            var fULLNAMEParameter = fULLNAME != null ?
                new ObjectParameter("FULLNAME", fULLNAME) :
                new ObjectParameter("FULLNAME", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUserlist", iDParameter, nAMEParameter, pASSWORDParameter, iSACTIVEParameter, rOLEParameter, fULLNAMEParameter);
        }
    
        public virtual int sp_ActualVsEstimatedHoursComparisonReport(Nullable<int> projectId, string taskName, Nullable<int> taskOwnerId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var projectIdParameter = projectId.HasValue ?
                new ObjectParameter("ProjectId", projectId) :
                new ObjectParameter("ProjectId", typeof(int));
    
            var taskNameParameter = taskName != null ?
                new ObjectParameter("TaskName", taskName) :
                new ObjectParameter("TaskName", typeof(string));
    
            var taskOwnerIdParameter = taskOwnerId.HasValue ?
                new ObjectParameter("TaskOwnerId", taskOwnerId) :
                new ObjectParameter("TaskOwnerId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ActualVsEstimatedHoursComparisonReport", projectIdParameter, taskNameParameter, taskOwnerIdParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual int sp_AddEditProjectUpdate(Nullable<bool> isUpdate, Nullable<int> schUpdateID, string updateNum, Nullable<int> resourceID, Nullable<int> projectID, string comments, string phase)
        {
            var isUpdateParameter = isUpdate.HasValue ?
                new ObjectParameter("isUpdate", isUpdate) :
                new ObjectParameter("isUpdate", typeof(bool));
    
            var schUpdateIDParameter = schUpdateID.HasValue ?
                new ObjectParameter("schUpdateID", schUpdateID) :
                new ObjectParameter("schUpdateID", typeof(int));
    
            var updateNumParameter = updateNum != null ?
                new ObjectParameter("UpdateNum", updateNum) :
                new ObjectParameter("UpdateNum", typeof(string));
    
            var resourceIDParameter = resourceID.HasValue ?
                new ObjectParameter("ResourceID", resourceID) :
                new ObjectParameter("ResourceID", typeof(int));
    
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("projectID", projectID) :
                new ObjectParameter("projectID", typeof(int));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("comments", comments) :
                new ObjectParameter("comments", typeof(string));
    
            var phaseParameter = phase != null ?
                new ObjectParameter("phase", phase) :
                new ObjectParameter("phase", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_AddEditProjectUpdate", isUpdateParameter, schUpdateIDParameter, updateNumParameter, resourceIDParameter, projectIDParameter, commentsParameter, phaseParameter);
        }
    
        public virtual int sp_AddMainTask(Nullable<int> id, string mainTaskName, Nullable<bool> isActive, Nullable<bool> isUpdate)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var mainTaskNameParameter = mainTaskName != null ?
                new ObjectParameter("MainTaskName", mainTaskName) :
                new ObjectParameter("MainTaskName", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("isActive", isActive) :
                new ObjectParameter("isActive", typeof(bool));
    
            var isUpdateParameter = isUpdate.HasValue ?
                new ObjectParameter("isUpdate", isUpdate) :
                new ObjectParameter("isUpdate", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_AddMainTask", idParameter, mainTaskNameParameter, isActiveParameter, isUpdateParameter);
        }
    
        public virtual int sp_AddNotification(Nullable<int> iProjectID)
        {
            var iProjectIDParameter = iProjectID.HasValue ?
                new ObjectParameter("iProjectID", iProjectID) :
                new ObjectParameter("iProjectID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_AddNotification", iProjectIDParameter);
        }
    
        public virtual int sp_AddProject(Nullable<int> projectID, string projectName, string projectEstimate)
        {
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            var projectNameParameter = projectName != null ?
                new ObjectParameter("ProjectName", projectName) :
                new ObjectParameter("ProjectName", typeof(string));
    
            var projectEstimateParameter = projectEstimate != null ?
                new ObjectParameter("projectEstimate", projectEstimate) :
                new ObjectParameter("projectEstimate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_AddProject", projectIDParameter, projectNameParameter, projectEstimateParameter);
        }
    
        public virtual int sp_AddTaskOwners(Nullable<int> id, string taskOwnerName, Nullable<bool> isActive, Nullable<bool> isUpdate)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var taskOwnerNameParameter = taskOwnerName != null ?
                new ObjectParameter("TaskOwnerName", taskOwnerName) :
                new ObjectParameter("TaskOwnerName", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("isActive", isActive) :
                new ObjectParameter("isActive", typeof(bool));
    
            var isUpdateParameter = isUpdate.HasValue ?
                new ObjectParameter("isUpdate", isUpdate) :
                new ObjectParameter("isUpdate", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_AddTaskOwners", idParameter, taskOwnerNameParameter, isActiveParameter, isUpdateParameter);
        }
    
        public virtual int sp_AddTimeSheetEntry(Nullable<int> resourceID, string resourceName, Nullable<System.DateTime> resourceDate)
        {
            var resourceIDParameter = resourceID.HasValue ?
                new ObjectParameter("ResourceID", resourceID) :
                new ObjectParameter("ResourceID", typeof(int));
    
            var resourceNameParameter = resourceName != null ?
                new ObjectParameter("ResourceName", resourceName) :
                new ObjectParameter("ResourceName", typeof(string));
    
            var resourceDateParameter = resourceDate.HasValue ?
                new ObjectParameter("ResourceDate", resourceDate) :
                new ObjectParameter("ResourceDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_AddTimeSheetEntry", resourceIDParameter, resourceNameParameter, resourceDateParameter);
        }
    
        public virtual int sp_AddTimeSheetEntryDetail(Nullable<int> timesheetID, string resourceCheckin, string resourceCheckOut)
        {
            var timesheetIDParameter = timesheetID.HasValue ?
                new ObjectParameter("TimesheetID", timesheetID) :
                new ObjectParameter("TimesheetID", typeof(int));
    
            var resourceCheckinParameter = resourceCheckin != null ?
                new ObjectParameter("ResourceCheckin", resourceCheckin) :
                new ObjectParameter("ResourceCheckin", typeof(string));
    
            var resourceCheckOutParameter = resourceCheckOut != null ?
                new ObjectParameter("ResourceCheckOut", resourceCheckOut) :
                new ObjectParameter("ResourceCheckOut", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_AddTimeSheetEntryDetail", timesheetIDParameter, resourceCheckinParameter, resourceCheckOutParameter);
        }
    
        public virtual int sp_AddUpdateResource(Nullable<bool> isUpdate, Nullable<int> schResourcecid, Nullable<int> projectID, string department, Nullable<int> resourceID, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string duration)
        {
            var isUpdateParameter = isUpdate.HasValue ?
                new ObjectParameter("isUpdate", isUpdate) :
                new ObjectParameter("isUpdate", typeof(bool));
    
            var schResourcecidParameter = schResourcecid.HasValue ?
                new ObjectParameter("SchResourcecid", schResourcecid) :
                new ObjectParameter("SchResourcecid", typeof(int));
    
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            var departmentParameter = department != null ?
                new ObjectParameter("Department", department) :
                new ObjectParameter("Department", typeof(string));
    
            var resourceIDParameter = resourceID.HasValue ?
                new ObjectParameter("ResourceID", resourceID) :
                new ObjectParameter("ResourceID", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var durationParameter = duration != null ?
                new ObjectParameter("Duration", duration) :
                new ObjectParameter("Duration", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_AddUpdateResource", isUpdateParameter, schResourcecidParameter, projectIDParameter, departmentParameter, resourceIDParameter, startDateParameter, endDateParameter, durationParameter);
        }
    
        public virtual int sp_ApproveAssignments(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ApproveAssignments", iDParameter);
        }
    
        public virtual ObjectResult<sp_ComparisonReport_Result> sp_ComparisonReport(Nullable<int> projectId)
        {
            var projectIdParameter = projectId.HasValue ?
                new ObjectParameter("ProjectId", projectId) :
                new ObjectParameter("ProjectId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ComparisonReport_Result>("sp_ComparisonReport", projectIdParameter);
        }
    
        public virtual int sp_DeleteAssignments(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DeleteAssignments", iDParameter);
        }
    
        public virtual int sp_DeleteProjectSchedule(Nullable<int> projectID)
        {
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DeleteProjectSchedule", projectIDParameter);
        }
    
        public virtual int sp_DeleteResourceSchedule(Nullable<int> resourceID)
        {
            var resourceIDParameter = resourceID.HasValue ?
                new ObjectParameter("resourceID", resourceID) :
                new ObjectParameter("resourceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DeleteResourceSchedule", resourceIDParameter);
        }
    
        public virtual int sp_DeleteUpdateSchedule(Nullable<int> updateID)
        {
            var updateIDParameter = updateID.HasValue ?
                new ObjectParameter("UpdateID", updateID) :
                new ObjectParameter("UpdateID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DeleteUpdateSchedule", updateIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_EmailNotificationCheck(Nullable<int> iProjectID, Nullable<System.DateTime> dtSent)
        {
            var iProjectIDParameter = iProjectID.HasValue ?
                new ObjectParameter("iProjectID", iProjectID) :
                new ObjectParameter("iProjectID", typeof(int));
    
            var dtSentParameter = dtSent.HasValue ?
                new ObjectParameter("DtSent", dtSent) :
                new ObjectParameter("DtSent", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_EmailNotificationCheck", iProjectIDParameter, dtSentParameter);
        }
    
        public virtual ObjectResult<sp_GetActualHoursData_Result> sp_GetActualHoursData(Nullable<System.DateTime> dtTo, Nullable<System.DateTime> dtFrom)
        {
            var dtToParameter = dtTo.HasValue ?
                new ObjectParameter("dtTo", dtTo) :
                new ObjectParameter("dtTo", typeof(System.DateTime));
    
            var dtFromParameter = dtFrom.HasValue ?
                new ObjectParameter("dtFrom", dtFrom) :
                new ObjectParameter("dtFrom", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetActualHoursData_Result>("sp_GetActualHoursData", dtToParameter, dtFromParameter);
        }
    
        public virtual int sp_getAssignmentData(Nullable<int> timesheetID, string resourceCheckin, string resourceCheckOut)
        {
            var timesheetIDParameter = timesheetID.HasValue ?
                new ObjectParameter("TimesheetID", timesheetID) :
                new ObjectParameter("TimesheetID", typeof(int));
    
            var resourceCheckinParameter = resourceCheckin != null ?
                new ObjectParameter("ResourceCheckin", resourceCheckin) :
                new ObjectParameter("ResourceCheckin", typeof(string));
    
            var resourceCheckOutParameter = resourceCheckOut != null ?
                new ObjectParameter("ResourceCheckOut", resourceCheckOut) :
                new ObjectParameter("ResourceCheckOut", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_getAssignmentData", timesheetIDParameter, resourceCheckinParameter, resourceCheckOutParameter);
        }
    
        public virtual ObjectResult<sp_GetAssignments_Result> sp_GetAssignments(Nullable<int> projectId, string taskName, Nullable<int> taskOwnerId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> iLoginUserID, Nullable<int> mainTaskID)
        {
            var projectIdParameter = projectId.HasValue ?
                new ObjectParameter("ProjectId", projectId) :
                new ObjectParameter("ProjectId", typeof(int));
    
            var taskNameParameter = taskName != null ?
                new ObjectParameter("TaskName", taskName) :
                new ObjectParameter("TaskName", typeof(string));
    
            var taskOwnerIdParameter = taskOwnerId.HasValue ?
                new ObjectParameter("TaskOwnerId", taskOwnerId) :
                new ObjectParameter("TaskOwnerId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var iLoginUserIDParameter = iLoginUserID.HasValue ?
                new ObjectParameter("iLoginUserID", iLoginUserID) :
                new ObjectParameter("iLoginUserID", typeof(int));
    
            var mainTaskIDParameter = mainTaskID.HasValue ?
                new ObjectParameter("MainTaskID", mainTaskID) :
                new ObjectParameter("MainTaskID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetAssignments_Result>("sp_GetAssignments", projectIdParameter, taskNameParameter, taskOwnerIdParameter, fromDateParameter, toDateParameter, iLoginUserIDParameter, mainTaskIDParameter);
        }
    
        public virtual ObjectResult<sp_GetAssignments_copycopy_Result> sp_GetAssignments_copycopy(Nullable<int> projectId, string taskName, Nullable<int> taskOwnerId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var projectIdParameter = projectId.HasValue ?
                new ObjectParameter("ProjectId", projectId) :
                new ObjectParameter("ProjectId", typeof(int));
    
            var taskNameParameter = taskName != null ?
                new ObjectParameter("TaskName", taskName) :
                new ObjectParameter("TaskName", typeof(string));
    
            var taskOwnerIdParameter = taskOwnerId.HasValue ?
                new ObjectParameter("TaskOwnerId", taskOwnerId) :
                new ObjectParameter("TaskOwnerId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetAssignments_copycopy_Result>("sp_GetAssignments_copycopy", projectIdParameter, taskNameParameter, taskOwnerIdParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<sp_GetDashboardStats_Staff1_Result> sp_GetDashboardStats_Staff(Nullable<System.DateTime> requestDate, string iStaffID)
        {
            var requestDateParameter = requestDate.HasValue ?
                new ObjectParameter("RequestDate", requestDate) :
                new ObjectParameter("RequestDate", typeof(System.DateTime));
    
            var iStaffIDParameter = iStaffID != null ?
                new ObjectParameter("iStaffID", iStaffID) :
                new ObjectParameter("iStaffID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetDashboardStats_Staff1_Result>("sp_GetDashboardStats_Staff", requestDateParameter, iStaffIDParameter);
        }
    
        public virtual ObjectResult<sp_GetDeviceUserList_Result> sp_GetDeviceUserList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetDeviceUserList_Result>("sp_GetDeviceUserList");
        }
    
        public virtual ObjectResult<sp_GetFilterProject_Result> sp_GetFilterProject()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetFilterProject_Result>("sp_GetFilterProject");
        }
    
        public virtual ObjectResult<sp_GetFilterProjectSchedule_Result> sp_GetFilterProjectSchedule()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetFilterProjectSchedule_Result>("sp_GetFilterProjectSchedule");
        }
    
        public virtual ObjectResult<Nullable<System.DateTime>> sp_GetLastTimeSheetEntry()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<System.DateTime>>("sp_GetLastTimeSheetEntry");
        }
    
        public virtual ObjectResult<sp_GetMainTaskList_Result> sp_GetMainTaskList(string mainTaskName, Nullable<bool> filter)
        {
            var mainTaskNameParameter = mainTaskName != null ?
                new ObjectParameter("MainTaskName", mainTaskName) :
                new ObjectParameter("MainTaskName", typeof(string));
    
            var filterParameter = filter.HasValue ?
                new ObjectParameter("filter", filter) :
                new ObjectParameter("filter", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetMainTaskList_Result>("sp_GetMainTaskList", mainTaskNameParameter, filterParameter);
        }
    
        public virtual ObjectResult<sp_GetRecurringTasks_Result> sp_GetRecurringTasks()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetRecurringTasks_Result>("sp_GetRecurringTasks");
        }
    
        public virtual ObjectResult<sp_GetTasksForProjects_Result> sp_GetTasksForProjects(string projectName, Nullable<bool> isAdminUser, Nullable<int> mainTaskID)
        {
            var projectNameParameter = projectName != null ?
                new ObjectParameter("ProjectName", projectName) :
                new ObjectParameter("ProjectName", typeof(string));
    
            var isAdminUserParameter = isAdminUser.HasValue ?
                new ObjectParameter("isAdminUser", isAdminUser) :
                new ObjectParameter("isAdminUser", typeof(bool));
    
            var mainTaskIDParameter = mainTaskID.HasValue ?
                new ObjectParameter("MainTaskID", mainTaskID) :
                new ObjectParameter("MainTaskID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetTasksForProjects_Result>("sp_GetTasksForProjects", projectNameParameter, isAdminUserParameter, mainTaskIDParameter);
        }
    
        public virtual ObjectResult<sp_GetTasksNotFound_Result> sp_GetTasksNotFound(Nullable<int> projectId, string taskName, Nullable<int> taskOwnerId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var projectIdParameter = projectId.HasValue ?
                new ObjectParameter("ProjectId", projectId) :
                new ObjectParameter("ProjectId", typeof(int));
    
            var taskNameParameter = taskName != null ?
                new ObjectParameter("TaskName", taskName) :
                new ObjectParameter("TaskName", typeof(string));
    
            var taskOwnerIdParameter = taskOwnerId.HasValue ?
                new ObjectParameter("TaskOwnerId", taskOwnerId) :
                new ObjectParameter("TaskOwnerId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetTasksNotFound_Result>("sp_GetTasksNotFound", projectIdParameter, taskNameParameter, taskOwnerIdParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<sp_getTimeSheetData_Result> sp_getTimeSheetData(Nullable<System.DateTime> dtTimesheet)
        {
            var dtTimesheetParameter = dtTimesheet.HasValue ?
                new ObjectParameter("dtTimesheet", dtTimesheet) :
                new ObjectParameter("dtTimesheet", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getTimeSheetData_Result>("sp_getTimeSheetData", dtTimesheetParameter);
        }
    
        public virtual ObjectResult<sp_getUpdateTableCount_Result> sp_getUpdateTableCount()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getUpdateTableCount_Result>("sp_getUpdateTableCount");
        }
    
        public virtual int sp_InsertAssignment(Nullable<int> iD, string projectName, string taskName, string subTaskName, string taskOwnerName, Nullable<System.DateTime> assignmentDateTime, Nullable<decimal> actualDuration, string type, Nullable<int> phase, string taskType, Nullable<int> mainTaskID, Nullable<decimal> billableHours, Nullable<int> isBillableApproved, Nullable<int> userID, Nullable<int> isActualApproved, Nullable<int> userIDActual)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var projectNameParameter = projectName != null ?
                new ObjectParameter("ProjectName", projectName) :
                new ObjectParameter("ProjectName", typeof(string));
    
            var taskNameParameter = taskName != null ?
                new ObjectParameter("TaskName", taskName) :
                new ObjectParameter("TaskName", typeof(string));
    
            var subTaskNameParameter = subTaskName != null ?
                new ObjectParameter("SubTaskName", subTaskName) :
                new ObjectParameter("SubTaskName", typeof(string));
    
            var taskOwnerNameParameter = taskOwnerName != null ?
                new ObjectParameter("TaskOwnerName", taskOwnerName) :
                new ObjectParameter("TaskOwnerName", typeof(string));
    
            var assignmentDateTimeParameter = assignmentDateTime.HasValue ?
                new ObjectParameter("AssignmentDateTime", assignmentDateTime) :
                new ObjectParameter("AssignmentDateTime", typeof(System.DateTime));
    
            var actualDurationParameter = actualDuration.HasValue ?
                new ObjectParameter("ActualDuration", actualDuration) :
                new ObjectParameter("ActualDuration", typeof(decimal));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var phaseParameter = phase.HasValue ?
                new ObjectParameter("Phase", phase) :
                new ObjectParameter("Phase", typeof(int));
    
            var taskTypeParameter = taskType != null ?
                new ObjectParameter("TaskType", taskType) :
                new ObjectParameter("TaskType", typeof(string));
    
            var mainTaskIDParameter = mainTaskID.HasValue ?
                new ObjectParameter("MainTaskID", mainTaskID) :
                new ObjectParameter("MainTaskID", typeof(int));
    
            var billableHoursParameter = billableHours.HasValue ?
                new ObjectParameter("BillableHours", billableHours) :
                new ObjectParameter("BillableHours", typeof(decimal));
    
            var isBillableApprovedParameter = isBillableApproved.HasValue ?
                new ObjectParameter("IsBillableApproved", isBillableApproved) :
                new ObjectParameter("IsBillableApproved", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var isActualApprovedParameter = isActualApproved.HasValue ?
                new ObjectParameter("IsActualApproved", isActualApproved) :
                new ObjectParameter("IsActualApproved", typeof(int));
    
            var userIDActualParameter = userIDActual.HasValue ?
                new ObjectParameter("UserIDActual", userIDActual) :
                new ObjectParameter("UserIDActual", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertAssignment", iDParameter, projectNameParameter, taskNameParameter, subTaskNameParameter, taskOwnerNameParameter, assignmentDateTimeParameter, actualDurationParameter, typeParameter, phaseParameter, taskTypeParameter, mainTaskIDParameter, billableHoursParameter, isBillableApprovedParameter, userIDParameter, isActualApprovedParameter, userIDActualParameter);
        }
    
        public virtual int sp_InsertProjects(Nullable<int> iD, string name, string type, Nullable<decimal> estimatedHours, Nullable<decimal> contractHours, Nullable<decimal> contractHourJan, Nullable<decimal> contractHourFeb, Nullable<decimal> contractHourMar, Nullable<decimal> contractHourApr, Nullable<decimal> contractHourMay, Nullable<decimal> contractHourJune, Nullable<decimal> contractHourJul, Nullable<decimal> contractHourAug, Nullable<decimal> contractHourSep, Nullable<decimal> contractHourOct, Nullable<decimal> contractHourNov, Nullable<decimal> contractHourDec, string projectDescription)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var estimatedHoursParameter = estimatedHours.HasValue ?
                new ObjectParameter("EstimatedHours", estimatedHours) :
                new ObjectParameter("EstimatedHours", typeof(decimal));
    
            var contractHoursParameter = contractHours.HasValue ?
                new ObjectParameter("ContractHours", contractHours) :
                new ObjectParameter("ContractHours", typeof(decimal));
    
            var contractHourJanParameter = contractHourJan.HasValue ?
                new ObjectParameter("ContractHourJan", contractHourJan) :
                new ObjectParameter("ContractHourJan", typeof(decimal));
    
            var contractHourFebParameter = contractHourFeb.HasValue ?
                new ObjectParameter("ContractHourFeb", contractHourFeb) :
                new ObjectParameter("ContractHourFeb", typeof(decimal));
    
            var contractHourMarParameter = contractHourMar.HasValue ?
                new ObjectParameter("ContractHourMar", contractHourMar) :
                new ObjectParameter("ContractHourMar", typeof(decimal));
    
            var contractHourAprParameter = contractHourApr.HasValue ?
                new ObjectParameter("ContractHourApr", contractHourApr) :
                new ObjectParameter("ContractHourApr", typeof(decimal));
    
            var contractHourMayParameter = contractHourMay.HasValue ?
                new ObjectParameter("ContractHourMay", contractHourMay) :
                new ObjectParameter("ContractHourMay", typeof(decimal));
    
            var contractHourJuneParameter = contractHourJune.HasValue ?
                new ObjectParameter("ContractHourJune", contractHourJune) :
                new ObjectParameter("ContractHourJune", typeof(decimal));
    
            var contractHourJulParameter = contractHourJul.HasValue ?
                new ObjectParameter("ContractHourJul", contractHourJul) :
                new ObjectParameter("ContractHourJul", typeof(decimal));
    
            var contractHourAugParameter = contractHourAug.HasValue ?
                new ObjectParameter("ContractHourAug", contractHourAug) :
                new ObjectParameter("ContractHourAug", typeof(decimal));
    
            var contractHourSepParameter = contractHourSep.HasValue ?
                new ObjectParameter("ContractHourSep", contractHourSep) :
                new ObjectParameter("ContractHourSep", typeof(decimal));
    
            var contractHourOctParameter = contractHourOct.HasValue ?
                new ObjectParameter("ContractHourOct", contractHourOct) :
                new ObjectParameter("ContractHourOct", typeof(decimal));
    
            var contractHourNovParameter = contractHourNov.HasValue ?
                new ObjectParameter("ContractHourNov", contractHourNov) :
                new ObjectParameter("ContractHourNov", typeof(decimal));
    
            var contractHourDecParameter = contractHourDec.HasValue ?
                new ObjectParameter("ContractHourDec", contractHourDec) :
                new ObjectParameter("ContractHourDec", typeof(decimal));
    
            var projectDescriptionParameter = projectDescription != null ?
                new ObjectParameter("ProjectDescription", projectDescription) :
                new ObjectParameter("ProjectDescription", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertProjects", iDParameter, nameParameter, typeParameter, estimatedHoursParameter, contractHoursParameter, contractHourJanParameter, contractHourFebParameter, contractHourMarParameter, contractHourAprParameter, contractHourMayParameter, contractHourJuneParameter, contractHourJulParameter, contractHourAugParameter, contractHourSepParameter, contractHourOctParameter, contractHourNovParameter, contractHourDecParameter, projectDescriptionParameter);
        }
    
        public virtual int sp_InsertRecurringTasksAtWeekStart()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertRecurringTasksAtWeekStart");
        }
    
        public virtual int sp_InsertSetting(Nullable<bool> mODE, Nullable<int> iD, string nAME, string vALUE, string uSERNAME)
        {
            var mODEParameter = mODE.HasValue ?
                new ObjectParameter("MODE", mODE) :
                new ObjectParameter("MODE", typeof(bool));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nAMEParameter = nAME != null ?
                new ObjectParameter("NAME", nAME) :
                new ObjectParameter("NAME", typeof(string));
    
            var vALUEParameter = vALUE != null ?
                new ObjectParameter("VALUE", vALUE) :
                new ObjectParameter("VALUE", typeof(string));
    
            var uSERNAMEParameter = uSERNAME != null ?
                new ObjectParameter("USERNAME", uSERNAME) :
                new ObjectParameter("USERNAME", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertSetting", mODEParameter, iDParameter, nAMEParameter, vALUEParameter, uSERNAMEParameter);
        }
    
        public virtual int sp_InsertTaskNotFound(string taskName, string subTaskName, string projectName, string taskOwnerName, string actualDuration, string assignmentDateTime)
        {
            var taskNameParameter = taskName != null ?
                new ObjectParameter("TaskName", taskName) :
                new ObjectParameter("TaskName", typeof(string));
    
            var subTaskNameParameter = subTaskName != null ?
                new ObjectParameter("SubTaskName", subTaskName) :
                new ObjectParameter("SubTaskName", typeof(string));
    
            var projectNameParameter = projectName != null ?
                new ObjectParameter("ProjectName", projectName) :
                new ObjectParameter("ProjectName", typeof(string));
    
            var taskOwnerNameParameter = taskOwnerName != null ?
                new ObjectParameter("TaskOwnerName", taskOwnerName) :
                new ObjectParameter("TaskOwnerName", typeof(string));
    
            var actualDurationParameter = actualDuration != null ?
                new ObjectParameter("ActualDuration", actualDuration) :
                new ObjectParameter("ActualDuration", typeof(string));
    
            var assignmentDateTimeParameter = assignmentDateTime != null ?
                new ObjectParameter("AssignmentDateTime", assignmentDateTime) :
                new ObjectParameter("AssignmentDateTime", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertTaskNotFound", taskNameParameter, subTaskNameParameter, projectNameParameter, taskOwnerNameParameter, actualDurationParameter, assignmentDateTimeParameter);
        }
    
        public virtual int sp_InsertTaskWithEstimate(Nullable<int> iD, Nullable<int> phase, string taskName, Nullable<decimal> estimatedDuration, Nullable<int> taskTypeId, Nullable<int> projectId)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var phaseParameter = phase.HasValue ?
                new ObjectParameter("Phase", phase) :
                new ObjectParameter("Phase", typeof(int));
    
            var taskNameParameter = taskName != null ?
                new ObjectParameter("TaskName", taskName) :
                new ObjectParameter("TaskName", typeof(string));
    
            var estimatedDurationParameter = estimatedDuration.HasValue ?
                new ObjectParameter("EstimatedDuration", estimatedDuration) :
                new ObjectParameter("EstimatedDuration", typeof(decimal));
    
            var taskTypeIdParameter = taskTypeId.HasValue ?
                new ObjectParameter("TaskTypeId", taskTypeId) :
                new ObjectParameter("TaskTypeId", typeof(int));
    
            var projectIdParameter = projectId.HasValue ?
                new ObjectParameter("ProjectId", projectId) :
                new ObjectParameter("ProjectId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertTaskWithEstimate", iDParameter, phaseParameter, taskNameParameter, estimatedDurationParameter, taskTypeIdParameter, projectIdParameter);
        }
    
        public virtual int sp_InsertUpdateScheduleReport_ResourceDetails(Nullable<int> schReport_ResourceDetailID, Nullable<int> resourceID, string phase, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string duration, Nullable<int> projectID)
        {
            var schReport_ResourceDetailIDParameter = schReport_ResourceDetailID.HasValue ?
                new ObjectParameter("SchReport_ResourceDetailID", schReport_ResourceDetailID) :
                new ObjectParameter("SchReport_ResourceDetailID", typeof(int));
    
            var resourceIDParameter = resourceID.HasValue ?
                new ObjectParameter("ResourceID", resourceID) :
                new ObjectParameter("ResourceID", typeof(int));
    
            var phaseParameter = phase != null ?
                new ObjectParameter("Phase", phase) :
                new ObjectParameter("Phase", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var durationParameter = duration != null ?
                new ObjectParameter("Duration", duration) :
                new ObjectParameter("Duration", typeof(string));
    
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertUpdateScheduleReport_ResourceDetails", schReport_ResourceDetailIDParameter, resourceIDParameter, phaseParameter, startDateParameter, endDateParameter, durationParameter, projectIDParameter);
        }
    
        public virtual int sp_InsertUpdateScheduleReport_Updates(Nullable<int> schReport_UpdateID, string updateNo, Nullable<int> resourceID, Nullable<int> projectID, string comments, string projectPhase)
        {
            var schReport_UpdateIDParameter = schReport_UpdateID.HasValue ?
                new ObjectParameter("SchReport_UpdateID", schReport_UpdateID) :
                new ObjectParameter("SchReport_UpdateID", typeof(int));
    
            var updateNoParameter = updateNo != null ?
                new ObjectParameter("UpdateNo", updateNo) :
                new ObjectParameter("UpdateNo", typeof(string));
    
            var resourceIDParameter = resourceID.HasValue ?
                new ObjectParameter("ResourceID", resourceID) :
                new ObjectParameter("ResourceID", typeof(int));
    
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            var projectPhaseParameter = projectPhase != null ?
                new ObjectParameter("ProjectPhase", projectPhase) :
                new ObjectParameter("ProjectPhase", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertUpdateScheduleReport_Updates", schReport_UpdateIDParameter, updateNoParameter, resourceIDParameter, projectIDParameter, commentsParameter, projectPhaseParameter);
        }
    
        public virtual int sp_InsertUpdateScheduleReportProject(Nullable<int> schReport_ID, Nullable<int> projectID, string schReport_ProjectName, string projectEstimate)
        {
            var schReport_IDParameter = schReport_ID.HasValue ?
                new ObjectParameter("SchReport_ID", schReport_ID) :
                new ObjectParameter("SchReport_ID", typeof(int));
    
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            var schReport_ProjectNameParameter = schReport_ProjectName != null ?
                new ObjectParameter("SchReport_ProjectName", schReport_ProjectName) :
                new ObjectParameter("SchReport_ProjectName", typeof(string));
    
            var projectEstimateParameter = projectEstimate != null ?
                new ObjectParameter("ProjectEstimate", projectEstimate) :
                new ObjectParameter("ProjectEstimate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertUpdateScheduleReportProject", schReport_IDParameter, projectIDParameter, schReport_ProjectNameParameter, projectEstimateParameter);
        }
    
        public virtual int sp_MapNewTasks(Nullable<int> projectId, string taskName)
        {
            var projectIdParameter = projectId.HasValue ?
                new ObjectParameter("ProjectId", projectId) :
                new ObjectParameter("ProjectId", typeof(int));
    
            var taskNameParameter = taskName != null ?
                new ObjectParameter("TaskName", taskName) :
                new ObjectParameter("TaskName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_MapNewTasks", projectIdParameter, taskNameParameter);
        }
    
        public virtual ObjectResult<sp_RetrieveScheduleReport_ResourceDetails_Result> sp_RetrieveScheduleReport_ResourceDetails(Nullable<int> projectID)
        {
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("projectID", projectID) :
                new ObjectParameter("projectID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_RetrieveScheduleReport_ResourceDetails_Result>("sp_RetrieveScheduleReport_ResourceDetails", projectIDParameter);
        }
    
        public virtual ObjectResult<sp_RetrieveScheduleReport_Updates_Result> sp_RetrieveScheduleReport_Updates(Nullable<int> projectID)
        {
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("projectID", projectID) :
                new ObjectParameter("projectID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_RetrieveScheduleReport_Updates_Result>("sp_RetrieveScheduleReport_Updates", projectIDParameter);
        }
    
        public virtual ObjectResult<sp_RetrieveScheduleReportProject_Result> sp_RetrieveScheduleReportProject(Nullable<int> schReport_ProjectID)
        {
            var schReport_ProjectIDParameter = schReport_ProjectID.HasValue ?
                new ObjectParameter("SchReport_ProjectID", schReport_ProjectID) :
                new ObjectParameter("SchReport_ProjectID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_RetrieveScheduleReportProject_Result>("sp_RetrieveScheduleReportProject", schReport_ProjectIDParameter);
        }
    
        public virtual ObjectResult<sp_TotalHoursOfProjects_Result> sp_TotalHoursOfProjects(Nullable<int> projectId, string taskName, Nullable<int> taskOwnerId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> taskType, string isApproved, Nullable<int> mainTaskID)
        {
            var projectIdParameter = projectId.HasValue ?
                new ObjectParameter("ProjectId", projectId) :
                new ObjectParameter("ProjectId", typeof(int));
    
            var taskNameParameter = taskName != null ?
                new ObjectParameter("TaskName", taskName) :
                new ObjectParameter("TaskName", typeof(string));
    
            var taskOwnerIdParameter = taskOwnerId.HasValue ?
                new ObjectParameter("TaskOwnerId", taskOwnerId) :
                new ObjectParameter("TaskOwnerId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var taskTypeParameter = taskType.HasValue ?
                new ObjectParameter("TaskType", taskType) :
                new ObjectParameter("TaskType", typeof(int));
    
            var isApprovedParameter = isApproved != null ?
                new ObjectParameter("IsApproved", isApproved) :
                new ObjectParameter("IsApproved", typeof(string));
    
            var mainTaskIDParameter = mainTaskID.HasValue ?
                new ObjectParameter("MainTaskID", mainTaskID) :
                new ObjectParameter("MainTaskID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_TotalHoursOfProjects_Result>("sp_TotalHoursOfProjects", projectIdParameter, taskNameParameter, taskOwnerIdParameter, fromDateParameter, toDateParameter, taskTypeParameter, isApprovedParameter, mainTaskIDParameter);
        }
    
        public virtual int sp_UtilityProcedureExecution()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UtilityProcedureExecution");
        }
    
        public virtual int sp_WeeklyEmailUpdateValue(string value)
        {
            var valueParameter = value != null ?
                new ObjectParameter("value", value) :
                new ObjectParameter("value", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_WeeklyEmailUpdateValue", valueParameter);
        }
    
        public virtual ObjectResult<sp_SettingList_Result> sp_SettingList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_SettingList_Result>("sp_SettingList");
        }
    
        public virtual ObjectResult<sp_SettingListWithParam_Result> sp_SettingListWithParam(string settingParam)
        {
            var settingParamParameter = settingParam != null ?
                new ObjectParameter("SettingParam", settingParam) :
                new ObjectParameter("SettingParam", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_SettingListWithParam_Result>("sp_SettingListWithParam", settingParamParameter);
        }
    
        public virtual ObjectResult<sp_SettingListWithParam_Result> sp_SettingListWithParam1(string settingParam)
        {
            var settingParamParameter = settingParam != null ?
                new ObjectParameter("SettingParam", settingParam) :
                new ObjectParameter("SettingParam", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_SettingListWithParam_Result>("sp_SettingListWithParam1", settingParamParameter);
        }
    
        public virtual ObjectResult<sp_getProjectByID_Result> sp_getProjectByID(Nullable<int> iProjectID)
        {
            var iProjectIDParameter = iProjectID.HasValue ?
                new ObjectParameter("iProjectID", iProjectID) :
                new ObjectParameter("iProjectID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getProjectByID_Result>("sp_getProjectByID", iProjectIDParameter);
        }
    
        public virtual ObjectResult<sp_getTaskType_Result> sp_getTaskType()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getTaskType_Result>("sp_getTaskType");
        }
    
        public virtual ObjectResult<sp_getLoginUserInfo_Result> sp_getLoginUserInfo(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getLoginUserInfo_Result>("sp_getLoginUserInfo", userIDParameter);
        }
    
        public virtual ObjectResult<sp_EmailNotificationCheck1_Result> sp_EmailNotificationCheck1(Nullable<int> iProjectID, Nullable<System.DateTime> dtSent)
        {
            var iProjectIDParameter = iProjectID.HasValue ?
                new ObjectParameter("iProjectID", iProjectID) :
                new ObjectParameter("iProjectID", typeof(int));
    
            var dtSentParameter = dtSent.HasValue ?
                new ObjectParameter("DtSent", dtSent) :
                new ObjectParameter("DtSent", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_EmailNotificationCheck1_Result>("sp_EmailNotificationCheck1", iProjectIDParameter, dtSentParameter);
        }
    
        public virtual ObjectResult<sp_EmailNotificationCheck1_Result> sp_EmailNotificationCheck2(Nullable<int> iProjectID, Nullable<System.DateTime> dtSent)
        {
            var iProjectIDParameter = iProjectID.HasValue ?
                new ObjectParameter("iProjectID", iProjectID) :
                new ObjectParameter("iProjectID", typeof(int));
    
            var dtSentParameter = dtSent.HasValue ?
                new ObjectParameter("DtSent", dtSent) :
                new ObjectParameter("DtSent", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_EmailNotificationCheck1_Result>("sp_EmailNotificationCheck2", iProjectIDParameter, dtSentParameter);
        }
    
        public virtual ObjectResult<sp_userNotification_Result> sp_userNotification(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_userNotification_Result>("sp_userNotification", iDParameter);
        }
    
        public virtual ObjectResult<sp_userNotification_Result> sp_userNotification1(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_userNotification_Result>("sp_userNotification1", iDParameter);
        }
    
        public virtual ObjectResult<sp_userNotification2_Result> sp_userNotification2(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_userNotification2_Result>("sp_userNotification2", iDParameter);
        }
    
        public virtual int SP_AccountActivatedUrlShortner(string userEmail, string activationKey)
        {
            var userEmailParameter = userEmail != null ?
                new ObjectParameter("UserEmail", userEmail) :
                new ObjectParameter("UserEmail", typeof(string));
    
            var activationKeyParameter = activationKey != null ?
                new ObjectParameter("ActivationKey", activationKey) :
                new ObjectParameter("ActivationKey", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_AccountActivatedUrlShortner", userEmailParameter, activationKeyParameter);
        }
    
        public virtual int SP_DeleteURLShortnerMapping(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_DeleteURLShortnerMapping", iDParameter);
        }
    
        public virtual ObjectResult<string> SP_GenerateUserKeyURLShortner()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SP_GenerateUserKeyURLShortner");
        }
    
        public virtual ObjectResult<string> SP_GetBaseURLSetting()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SP_GetBaseURLSetting");
        }
    
        public virtual int sp_GetDetailShortURL(Nullable<int> shortUrlID)
        {
            var shortUrlIDParameter = shortUrlID.HasValue ?
                new ObjectParameter("ShortUrlID", shortUrlID) :
                new ObjectParameter("ShortUrlID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GetDetailShortURL", shortUrlIDParameter);
        }
    
        public virtual ObjectResult<string> SP_GetRandomURL(string baseURL)
        {
            var baseURLParameter = baseURL != null ?
                new ObjectParameter("BaseURL", baseURL) :
                new ObjectParameter("BaseURL", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SP_GetRandomURL", baseURLParameter);
        }
    
        public virtual ObjectResult<sp_GetShortURLDashboard_Result> sp_GetShortURLDashboard(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetShortURLDashboard_Result>("sp_GetShortURLDashboard", userIDParameter);
        }
    
        public virtual ObjectResult<string> sp_InsertScrappedData(string email, string phoneNo, string dataChunk, string country, string department, string company, string messageType, string source)
        {
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var phoneNoParameter = phoneNo != null ?
                new ObjectParameter("PhoneNo", phoneNo) :
                new ObjectParameter("PhoneNo", typeof(string));
    
            var dataChunkParameter = dataChunk != null ?
                new ObjectParameter("DataChunk", dataChunk) :
                new ObjectParameter("DataChunk", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var departmentParameter = department != null ?
                new ObjectParameter("Department", department) :
                new ObjectParameter("Department", typeof(string));
    
            var companyParameter = company != null ?
                new ObjectParameter("Company", company) :
                new ObjectParameter("Company", typeof(string));
    
            var messageTypeParameter = messageType != null ?
                new ObjectParameter("MessageType", messageType) :
                new ObjectParameter("MessageType", typeof(string));
    
            var sourceParameter = source != null ?
                new ObjectParameter("Source", source) :
                new ObjectParameter("Source", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_InsertScrappedData", emailParameter, phoneNoParameter, dataChunkParameter, countryParameter, departmentParameter, companyParameter, messageTypeParameter, sourceParameter);
        }
    
        public virtual int SP_InsertURLShortnerMapping(string actualURL, string shotURL, string company, string emailAddress, Nullable<int> userId, string pagetitle, string sessionID)
        {
            var actualURLParameter = actualURL != null ?
                new ObjectParameter("ActualURL", actualURL) :
                new ObjectParameter("ActualURL", typeof(string));
    
            var shotURLParameter = shotURL != null ?
                new ObjectParameter("ShotURL", shotURL) :
                new ObjectParameter("ShotURL", typeof(string));
    
            var companyParameter = company != null ?
                new ObjectParameter("Company", company) :
                new ObjectParameter("Company", typeof(string));
    
            var emailAddressParameter = emailAddress != null ?
                new ObjectParameter("EmailAddress", emailAddress) :
                new ObjectParameter("EmailAddress", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var pagetitleParameter = pagetitle != null ?
                new ObjectParameter("pagetitle", pagetitle) :
                new ObjectParameter("pagetitle", typeof(string));
    
            var sessionIDParameter = sessionID != null ?
                new ObjectParameter("sessionID", sessionID) :
                new ObjectParameter("sessionID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_InsertURLShortnerMapping", actualURLParameter, shotURLParameter, companyParameter, emailAddressParameter, userIdParameter, pagetitleParameter, sessionIDParameter);
        }
    
        public virtual int sp_InsertUtilityRunningRange(string startDate, string endDate)
        {
            var startDateParameter = startDate != null ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertUtilityRunningRange", startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<string> SP_RetrieveActualURL(string shortURL, string browserName, string oSName, string deviceName, string language)
        {
            var shortURLParameter = shortURL != null ?
                new ObjectParameter("ShortURL", shortURL) :
                new ObjectParameter("ShortURL", typeof(string));
    
            var browserNameParameter = browserName != null ?
                new ObjectParameter("BrowserName", browserName) :
                new ObjectParameter("BrowserName", typeof(string));
    
            var oSNameParameter = oSName != null ?
                new ObjectParameter("OSName", oSName) :
                new ObjectParameter("OSName", typeof(string));
    
            var deviceNameParameter = deviceName != null ?
                new ObjectParameter("DeviceName", deviceName) :
                new ObjectParameter("DeviceName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SP_RetrieveActualURL", shortURLParameter, browserNameParameter, oSNameParameter, deviceNameParameter, languageParameter);
        }
    
        public virtual int sp_SaveUpdateMapping(Nullable<int> projectid, string projectName, string userIDs)
        {
            var projectidParameter = projectid.HasValue ?
                new ObjectParameter("projectid", projectid) :
                new ObjectParameter("projectid", typeof(int));
    
            var projectNameParameter = projectName != null ?
                new ObjectParameter("projectName", projectName) :
                new ObjectParameter("projectName", typeof(string));
    
            var userIDsParameter = userIDs != null ?
                new ObjectParameter("UserIDs", userIDs) :
                new ObjectParameter("UserIDs", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_SaveUpdateMapping", projectidParameter, projectNameParameter, userIDsParameter);
        }
    
        public virtual int sp_SaveUpdateTaskMapping(Nullable<int> mainTaskID, string projectIDs)
        {
            var mainTaskIDParameter = mainTaskID.HasValue ?
                new ObjectParameter("MainTaskID", mainTaskID) :
                new ObjectParameter("MainTaskID", typeof(int));
    
            var projectIDsParameter = projectIDs != null ?
                new ObjectParameter("ProjectIDs", projectIDs) :
                new ObjectParameter("ProjectIDs", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_SaveUpdateTaskMapping", mainTaskIDParameter, projectIDsParameter);
        }
    
        public virtual int SP_UpdateURLShortnerMapping(string actualURL, string shortURL, Nullable<int> userID, string pageTitle, Nullable<int> iD)
        {
            var actualURLParameter = actualURL != null ?
                new ObjectParameter("ActualURL", actualURL) :
                new ObjectParameter("ActualURL", typeof(string));
    
            var shortURLParameter = shortURL != null ?
                new ObjectParameter("ShortURL", shortURL) :
                new ObjectParameter("ShortURL", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(int));
    
            var pageTitleParameter = pageTitle != null ?
                new ObjectParameter("PageTitle", pageTitle) :
                new ObjectParameter("PageTitle", typeof(string));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UpdateURLShortnerMapping", actualURLParameter, shortURLParameter, userIDParameter, pageTitleParameter, iDParameter);
        }
    
        public virtual ObjectResult<sp_UrlShortnerFetchUsers_Result> sp_UrlShortnerFetchUsers()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_UrlShortnerFetchUsers_Result>("sp_UrlShortnerFetchUsers");
        }
    
        public virtual ObjectResult<sp_UrlShortnerSearchShortURL_Result> sp_UrlShortnerSearchShortURL(Nullable<int> userID, string shortURL)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var shortURLParameter = shortURL != null ?
                new ObjectParameter("ShortURL", shortURL) :
                new ObjectParameter("ShortURL", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_UrlShortnerSearchShortURL_Result>("sp_UrlShortnerSearchShortURL", userIDParameter, shortURLParameter);
        }
    
        public virtual ObjectResult<sp_UrlShortnerSearchUserName_Result> sp_UrlShortnerSearchUserName(string keyWord)
        {
            var keyWordParameter = keyWord != null ?
                new ObjectParameter("keyWord", keyWord) :
                new ObjectParameter("keyWord", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_UrlShortnerSearchUserName_Result>("sp_UrlShortnerSearchUserName", keyWordParameter);
        }
    
        public virtual int sp_UrlShortnerSetActiveUser(Nullable<int> userID, Nullable<bool> isActive)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UrlShortnerSetActiveUser", userIDParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<sp_UrlShortnerSignIn_Result> sp_UrlShortnerSignIn(string userName, string password)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_UrlShortnerSignIn_Result>("sp_UrlShortnerSignIn", userNameParameter, passwordParameter);
        }
    
        public virtual int sp_UrlShortnerSignUp(string userName, string password, string email, string key)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var keyParameter = key != null ?
                new ObjectParameter("key", key) :
                new ObjectParameter("key", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UrlShortnerSignUp", userNameParameter, passwordParameter, emailParameter, keyParameter);
        }
    
        public virtual int sp_DeleteUserDomain(Nullable<int> uniqueID)
        {
            var uniqueIDParameter = uniqueID.HasValue ?
                new ObjectParameter("UniqueID", uniqueID) :
                new ObjectParameter("UniqueID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DeleteUserDomain", uniqueIDParameter);
        }
    
        public virtual ObjectResult<sp_GetGuestUsersInfo_Result> sp_GetGuestUsersInfo(string domainName, string sessionID)
        {
            var domainNameParameter = domainName != null ?
                new ObjectParameter("DomainName", domainName) :
                new ObjectParameter("DomainName", typeof(string));
    
            var sessionIDParameter = sessionID != null ?
                new ObjectParameter("SessionID", sessionID) :
                new ObjectParameter("SessionID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetGuestUsersInfo_Result>("sp_GetGuestUsersInfo", domainNameParameter, sessionIDParameter);
        }
    
        public virtual ObjectResult<sp_GetUserDomainList_Result> sp_GetUserDomainList(Nullable<int> userID, Nullable<int> statusID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetUserDomainList_Result>("sp_GetUserDomainList", userIDParameter, statusIDParameter);
        }
    
        public virtual int sp_SaveUserDomain(Nullable<int> userID, string domainName)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var domainNameParameter = domainName != null ?
                new ObjectParameter("DomainName", domainName) :
                new ObjectParameter("DomainName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_SaveUserDomain", userIDParameter, domainNameParameter);
        }
    
        public virtual int sp_UpdateUserDomain(Nullable<int> uniqueID)
        {
            var uniqueIDParameter = uniqueID.HasValue ?
                new ObjectParameter("UniqueID", uniqueID) :
                new ObjectParameter("UniqueID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateUserDomain", uniqueIDParameter);
        }
    
        public virtual ObjectResult<sp_UserNotificationManagement_Result> sp_UserNotificationManagement(Nullable<int> type, string notificationmessage, Nullable<int> userid, Nullable<int> notificationid)
        {
            var typeParameter = type.HasValue ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(int));
    
            var notificationmessageParameter = notificationmessage != null ?
                new ObjectParameter("notificationmessage", notificationmessage) :
                new ObjectParameter("notificationmessage", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var notificationidParameter = notificationid.HasValue ?
                new ObjectParameter("notificationid", notificationid) :
                new ObjectParameter("notificationid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_UserNotificationManagement_Result>("sp_UserNotificationManagement", typeParameter, notificationmessageParameter, useridParameter, notificationidParameter);
        }
    
        public virtual ObjectResult<sp_UserProfileManagement_Result> sp_UserProfileManagement(Nullable<int> userid, string operationtype, string name, string email)
        {
            var useridParameter = userid.HasValue ?
                new ObjectParameter("Userid", userid) :
                new ObjectParameter("Userid", typeof(int));
    
            var operationtypeParameter = operationtype != null ?
                new ObjectParameter("Operationtype", operationtype) :
                new ObjectParameter("Operationtype", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_UserProfileManagement_Result>("sp_UserProfileManagement", useridParameter, operationtypeParameter, nameParameter, emailParameter);
        }
    
        public virtual ObjectResult<sp_ChangePassword_Result> sp_ChangePassword(Nullable<int> userId, string newPassword)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var newPasswordParameter = newPassword != null ?
                new ObjectParameter("NewPassword", newPassword) :
                new ObjectParameter("NewPassword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ChangePassword_Result>("sp_ChangePassword", userIdParameter, newPasswordParameter);
        }
    
        public virtual ObjectResult<sp_getLoginUserInfo1_Result> sp_getLoginUserInfo1(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getLoginUserInfo1_Result>("sp_getLoginUserInfo1", userIDParameter);
        }
    
        public virtual ObjectResult<sp_getLoginUserInfo_Result> sp_getLoginUserInfo2(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getLoginUserInfo_Result>("sp_getLoginUserInfo2", userIDParameter);
        }
    
        public virtual ObjectResult<sp_UserLogin_Result> sp_UserLogin(string uSERNAME, string password)
        {
            var uSERNAMEParameter = uSERNAME != null ?
                new ObjectParameter("USERNAME", uSERNAME) :
                new ObjectParameter("USERNAME", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_UserLogin_Result>("sp_UserLogin", uSERNAMEParameter, passwordParameter);
        }
    
        public virtual int sp_ChangePwd(Nullable<int> userId, string currPassword, string newPassword, ObjectParameter status)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var currPasswordParameter = currPassword != null ?
                new ObjectParameter("CurrPassword", currPassword) :
                new ObjectParameter("CurrPassword", typeof(string));
    
            var newPasswordParameter = newPassword != null ?
                new ObjectParameter("NewPassword", newPassword) :
                new ObjectParameter("NewPassword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ChangePwd", userIdParameter, currPasswordParameter, newPasswordParameter, status);
        }
    
        public virtual int sp_GetFullName(Nullable<int> iD, string accountType, ObjectParameter count, string username)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var accountTypeParameter = accountType != null ?
                new ObjectParameter("AccountType", accountType) :
                new ObjectParameter("AccountType", typeof(string));
    
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GetFullName", iDParameter, accountTypeParameter, count, usernameParameter);
        }
    
        public virtual ObjectResult<sp_GetFullName1_Result> sp_GetFullName1(Nullable<int> iD, string accountType, ObjectParameter count, string username)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var accountTypeParameter = accountType != null ?
                new ObjectParameter("AccountType", accountType) :
                new ObjectParameter("AccountType", typeof(string));
    
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetFullName1_Result>("sp_GetFullName1", iDParameter, accountTypeParameter, count, usernameParameter);
        }
    
        public virtual ObjectResult<sp_GetMultipleSelect_Result> sp_GetMultipleSelect()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetMultipleSelect_Result>("sp_GetMultipleSelect");
        }
    
        public virtual ObjectResult<sp_userNotificationCount_Result> sp_userNotificationCount(Nullable<int> userid)
        {
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_userNotificationCount_Result>("sp_userNotificationCount", useridParameter);
        }
    
        public virtual ObjectResult<sp_GetSubTask_Result> sp_GetSubTask(Nullable<int> projectID, Nullable<int> mainTaskID)
        {
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            var mainTaskIDParameter = mainTaskID.HasValue ?
                new ObjectParameter("MainTaskID", mainTaskID) :
                new ObjectParameter("MainTaskID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetSubTask_Result>("sp_GetSubTask", projectIDParameter, mainTaskIDParameter);
        }
    
        public virtual ObjectResult<sp_GetTaskOwners_Result> sp_GetTaskOwners(string taskOwnerName, Nullable<bool> filter)
        {
            var taskOwnerNameParameter = taskOwnerName != null ?
                new ObjectParameter("TaskOwnerName", taskOwnerName) :
                new ObjectParameter("TaskOwnerName", typeof(string));
    
            var filterParameter = filter.HasValue ?
                new ObjectParameter("filter", filter) :
                new ObjectParameter("filter", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetTaskOwners_Result>("sp_GetTaskOwners", taskOwnerNameParameter, filterParameter);
        }
    
        public virtual ObjectResult<sp_GetMainTaskList1_Result> sp_GetMainTaskList1(string mainTaskName, Nullable<bool> filter)
        {
            var mainTaskNameParameter = mainTaskName != null ?
                new ObjectParameter("MainTaskName", mainTaskName) :
                new ObjectParameter("MainTaskName", typeof(string));
    
            var filterParameter = filter.HasValue ?
                new ObjectParameter("filter", filter) :
                new ObjectParameter("filter", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetMainTaskList1_Result>("sp_GetMainTaskList1", mainTaskNameParameter, filterParameter);
        }
    
        public virtual ObjectResult<sp_GetMaintasks_Result> sp_GetMaintasks()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetMaintasks_Result>("sp_GetMaintasks");
        }
    
        public virtual ObjectResult<sp_GetTasksDescription_Result> sp_GetTasksDescription(Nullable<int> projectID, Nullable<int> mainTaskID)
        {
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            var mainTaskIDParameter = mainTaskID.HasValue ?
                new ObjectParameter("MainTaskID", mainTaskID) :
                new ObjectParameter("MainTaskID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetTasksDescription_Result>("sp_GetTasksDescription", projectIDParameter, mainTaskIDParameter);
        }
    
        public virtual ObjectResult<sp_GetUserProfile_Result> sp_GetUserProfile(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetUserProfile_Result>("sp_GetUserProfile", userIDParameter);
        }
    
        public virtual ObjectResult<sp_ResetPassword_Result> sp_ResetPassword(Nullable<int> loginid, string changePassword)
        {
            var loginidParameter = loginid.HasValue ?
                new ObjectParameter("Loginid", loginid) :
                new ObjectParameter("Loginid", typeof(int));
    
            var changePasswordParameter = changePassword != null ?
                new ObjectParameter("ChangePassword", changePassword) :
                new ObjectParameter("ChangePassword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ResetPassword_Result>("sp_ResetPassword", loginidParameter, changePasswordParameter);
        }
    
        public virtual ObjectResult<sp_ResetPasswordValidation_Result> sp_ResetPasswordValidation(string globalID)
        {
            var globalIDParameter = globalID != null ?
                new ObjectParameter("GlobalID", globalID) :
                new ObjectParameter("GlobalID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ResetPasswordValidation_Result>("sp_ResetPasswordValidation", globalIDParameter);
        }
    
        public virtual ObjectResult<sp_userNotificationDelete_Result> sp_userNotificationDelete(string notificationID)
        {
            var notificationIDParameter = notificationID != null ?
                new ObjectParameter("NotificationID", notificationID) :
                new ObjectParameter("NotificationID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_userNotificationDelete_Result>("sp_userNotificationDelete", notificationIDParameter);
        }
    
        public virtual ObjectResult<sp_ChangePassword_React_Result> sp_ChangePassword_React(Nullable<int> userId, string currPassword, string newPassword)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var currPasswordParameter = currPassword != null ?
                new ObjectParameter("CurrPassword", currPassword) :
                new ObjectParameter("CurrPassword", typeof(string));
    
            var newPasswordParameter = newPassword != null ?
                new ObjectParameter("NewPassword", newPassword) :
                new ObjectParameter("NewPassword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ChangePassword_React_Result>("sp_ChangePassword_React", userIdParameter, currPasswordParameter, newPasswordParameter);
        }
    
        public virtual ObjectResult<sp_ChangePassword_Update_Result> sp_ChangePassword_Update(Nullable<int> userId, string currPassword, string newPassword)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var currPasswordParameter = currPassword != null ?
                new ObjectParameter("CurrPassword", currPassword) :
                new ObjectParameter("CurrPassword", typeof(string));
    
            var newPasswordParameter = newPassword != null ?
                new ObjectParameter("NewPassword", newPassword) :
                new ObjectParameter("NewPassword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ChangePassword_Update_Result>("sp_ChangePassword_Update", userIdParameter, currPasswordParameter, newPasswordParameter);
        }
    
        public virtual ObjectResult<sp_GetDashboardStats1_Result> sp_GetDashboardStats1(Nullable<System.DateTime> requestDate, Nullable<bool> isManagementTime)
        {
            var requestDateParameter = requestDate.HasValue ?
                new ObjectParameter("RequestDate", requestDate) :
                new ObjectParameter("RequestDate", typeof(System.DateTime));
    
            var isManagementTimeParameter = isManagementTime.HasValue ?
                new ObjectParameter("IsManagementTime", isManagementTime) :
                new ObjectParameter("IsManagementTime", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetDashboardStats1_Result>("sp_GetDashboardStats1", requestDateParameter, isManagementTimeParameter);
        }
    
        public virtual ObjectResult<sp_GetSpentTaskTime_Result> sp_GetSpentTaskTime(Nullable<int> projectId)
        {
            var projectIdParameter = projectId.HasValue ?
                new ObjectParameter("ProjectId", projectId) :
                new ObjectParameter("ProjectId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetSpentTaskTime_Result>("sp_GetSpentTaskTime", projectIdParameter);
        }
    
        public virtual int sp_InsertUser(Nullable<int> loginID, string name, string email, string department, string joiningdate, Nullable<bool> status, string eMSRole, string designation)
        {
            var loginIDParameter = loginID.HasValue ?
                new ObjectParameter("LoginID", loginID) :
                new ObjectParameter("LoginID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var departmentParameter = department != null ?
                new ObjectParameter("Department", department) :
                new ObjectParameter("Department", typeof(string));
    
            var joiningdateParameter = joiningdate != null ?
                new ObjectParameter("Joiningdate", joiningdate) :
                new ObjectParameter("Joiningdate", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            var eMSRoleParameter = eMSRole != null ?
                new ObjectParameter("EMSRole", eMSRole) :
                new ObjectParameter("EMSRole", typeof(string));
    
            var designationParameter = designation != null ?
                new ObjectParameter("Designation", designation) :
                new ObjectParameter("Designation", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertUser", loginIDParameter, nameParameter, emailParameter, departmentParameter, joiningdateParameter, statusParameter, eMSRoleParameter, designationParameter);
        }
    
        public virtual int sp_EditUserProfile(Nullable<int> loginID, string name, string email, string department, string joiningdate, Nullable<bool> status, string eMSRole, string designation, string picturePath)
        {
            var loginIDParameter = loginID.HasValue ?
                new ObjectParameter("LoginID", loginID) :
                new ObjectParameter("LoginID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var departmentParameter = department != null ?
                new ObjectParameter("Department", department) :
                new ObjectParameter("Department", typeof(string));
    
            var joiningdateParameter = joiningdate != null ?
                new ObjectParameter("Joiningdate", joiningdate) :
                new ObjectParameter("Joiningdate", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            var eMSRoleParameter = eMSRole != null ?
                new ObjectParameter("EMSRole", eMSRole) :
                new ObjectParameter("EMSRole", typeof(string));
    
            var designationParameter = designation != null ?
                new ObjectParameter("Designation", designation) :
                new ObjectParameter("Designation", typeof(string));
    
            var picturePathParameter = picturePath != null ?
                new ObjectParameter("PicturePath", picturePath) :
                new ObjectParameter("PicturePath", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_EditUserProfile", loginIDParameter, nameParameter, emailParameter, departmentParameter, joiningdateParameter, statusParameter, eMSRoleParameter, designationParameter, picturePathParameter);
        }
    
        public virtual ObjectResult<sp_GetMainTaskList_Update_Result> sp_GetMainTaskList_Update(string mainTaskName, Nullable<bool> filter)
        {
            var mainTaskNameParameter = mainTaskName != null ?
                new ObjectParameter("MainTaskName", mainTaskName) :
                new ObjectParameter("MainTaskName", typeof(string));
    
            var filterParameter = filter.HasValue ?
                new ObjectParameter("filter", filter) :
                new ObjectParameter("filter", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetMainTaskList_Update_Result>("sp_GetMainTaskList_Update", mainTaskNameParameter, filterParameter);
        }
    
        public virtual ObjectResult<sp_GetDashboardStats_Staff_Update_Result> sp_GetDashboardStats_Staff_Update(Nullable<System.DateTime> requestDate, string iStaffID)
        {
            var requestDateParameter = requestDate.HasValue ?
                new ObjectParameter("RequestDate", requestDate) :
                new ObjectParameter("RequestDate", typeof(System.DateTime));
    
            var iStaffIDParameter = iStaffID != null ?
                new ObjectParameter("iStaffID", iStaffID) :
                new ObjectParameter("iStaffID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetDashboardStats_Staff_Update_Result>("sp_GetDashboardStats_Staff_Update", requestDateParameter, iStaffIDParameter);
        }
    
        public virtual ObjectResult<sp_unReaduserNotification_Result> sp_unReaduserNotification(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_unReaduserNotification_Result>("sp_unReaduserNotification", iDParameter);
        }
    
        public virtual ObjectResult<sp_GetDashboardStats_Staff_Search_Result> sp_GetDashboardStats_Staff_Search(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string iStaffID)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var iStaffIDParameter = iStaffID != null ?
                new ObjectParameter("iStaffID", iStaffID) :
                new ObjectParameter("iStaffID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetDashboardStats_Staff_Search_Result>("sp_GetDashboardStats_Staff_Search", startDateParameter, endDateParameter, iStaffIDParameter);
        }
    
        public virtual int sp_userNotificationRead(Nullable<int> userid, Nullable<int> notificationid)
        {
            var useridParameter = userid.HasValue ?
                new ObjectParameter("Userid", userid) :
                new ObjectParameter("Userid", typeof(int));
    
            var notificationidParameter = notificationid.HasValue ?
                new ObjectParameter("Notificationid", notificationid) :
                new ObjectParameter("Notificationid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_userNotificationRead", useridParameter, notificationidParameter);
        }
    
        public virtual int sp_userNotificationRead1(Nullable<int> userid, Nullable<int> notificationid)
        {
            var useridParameter = userid.HasValue ?
                new ObjectParameter("Userid", userid) :
                new ObjectParameter("Userid", typeof(int));
    
            var notificationidParameter = notificationid.HasValue ?
                new ObjectParameter("Notificationid", notificationid) :
                new ObjectParameter("Notificationid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_userNotificationRead1", useridParameter, notificationidParameter);
        }
    
        public virtual ObjectResult<sp_unReaduserNotification1_Result> sp_unReaduserNotification1(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_unReaduserNotification1_Result>("sp_unReaduserNotification1", iDParameter);
        }
    
        public virtual int sp_userNotificationSeen(Nullable<int> userid)
        {
            var useridParameter = userid.HasValue ?
                new ObjectParameter("Userid", userid) :
                new ObjectParameter("Userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_userNotificationSeen", useridParameter);
        }
    
        public virtual ObjectResult<sp_GetDashboardStats_copyNew_Result> sp_GetDashboardStats_copyNew(Nullable<System.DateTime> requestStartDate, Nullable<System.DateTime> requestEndDate, Nullable<int> projectID, Nullable<bool> isManagementTime)
        {
            var requestStartDateParameter = requestStartDate.HasValue ?
                new ObjectParameter("RequestStartDate", requestStartDate) :
                new ObjectParameter("RequestStartDate", typeof(System.DateTime));
    
            var requestEndDateParameter = requestEndDate.HasValue ?
                new ObjectParameter("RequestEndDate", requestEndDate) :
                new ObjectParameter("RequestEndDate", typeof(System.DateTime));
    
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            var isManagementTimeParameter = isManagementTime.HasValue ?
                new ObjectParameter("IsManagementTime", isManagementTime) :
                new ObjectParameter("IsManagementTime", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetDashboardStats_copyNew_Result>("sp_GetDashboardStats_copyNew", requestStartDateParameter, requestEndDateParameter, projectIDParameter, isManagementTimeParameter);
        }
    
        public virtual ObjectResult<sp_GetSpentTaskTime_update_Result> sp_GetSpentTaskTime_update(Nullable<int> projectId, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var projectIdParameter = projectId.HasValue ?
                new ObjectParameter("ProjectId", projectId) :
                new ObjectParameter("ProjectId", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetSpentTaskTime_update_Result>("sp_GetSpentTaskTime_update", projectIdParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<sp_GetProjectBudgetDetail_Result> sp_GetProjectBudgetDetail(Nullable<int> projectID, Nullable<System.DateTime> projectBudgetYear)
        {
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            var projectBudgetYearParameter = projectBudgetYear.HasValue ?
                new ObjectParameter("ProjectBudgetYear", projectBudgetYear) :
                new ObjectParameter("ProjectBudgetYear", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetProjectBudgetDetail_Result>("sp_GetProjectBudgetDetail", projectIDParameter, projectBudgetYearParameter);
        }
    
        public virtual ObjectResult<sp_SearchProject_Result> sp_SearchProject(string projectName)
        {
            var projectNameParameter = projectName != null ?
                new ObjectParameter("ProjectName", projectName) :
                new ObjectParameter("ProjectName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_SearchProject_Result>("sp_SearchProject", projectNameParameter);
        }
    
        public virtual ObjectResult<sp_GetProjectsLazyLoading_Result> sp_GetProjectsLazyLoading(Nullable<int> recsPerPage, Nullable<int> page)
        {
            var recsPerPageParameter = recsPerPage.HasValue ?
                new ObjectParameter("recsPerPage", recsPerPage) :
                new ObjectParameter("recsPerPage", typeof(int));
    
            var pageParameter = page.HasValue ?
                new ObjectParameter("page", page) :
                new ObjectParameter("page", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetProjectsLazyLoading_Result>("sp_GetProjectsLazyLoading", recsPerPageParameter, pageParameter);
        }
    
        public virtual ObjectResult<sp_GetSubTaskTime_Result> sp_GetSubTaskTime(Nullable<int> projectId, string mainTaskName, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var projectIdParameter = projectId.HasValue ?
                new ObjectParameter("ProjectId", projectId) :
                new ObjectParameter("ProjectId", typeof(int));
    
            var mainTaskNameParameter = mainTaskName != null ?
                new ObjectParameter("MainTaskName", mainTaskName) :
                new ObjectParameter("MainTaskName", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetSubTaskTime_Result>("sp_GetSubTaskTime", projectIdParameter, mainTaskNameParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<sp_GetSubTaskTimeOwner_Result> sp_GetSubTaskTimeOwner(Nullable<int> projectId, string mainTaskName, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var projectIdParameter = projectId.HasValue ?
                new ObjectParameter("ProjectId", projectId) :
                new ObjectParameter("ProjectId", typeof(int));
    
            var mainTaskNameParameter = mainTaskName != null ?
                new ObjectParameter("MainTaskName", mainTaskName) :
                new ObjectParameter("MainTaskName", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetSubTaskTimeOwner_Result>("sp_GetSubTaskTimeOwner", projectIdParameter, mainTaskNameParameter, startDateParameter, endDateParameter);
        }
    
        public virtual int sp_AddRecord(Nullable<int> iD, Nullable<int> projectID, Nullable<int> tASKID, Nullable<int> userID, Nullable<System.DateTime> assignmentDateTime, string actualDuration, string commentText, string billableHours, Nullable<int> isBillableApproved, Nullable<int> userIDBillable, Nullable<int> isActualApproved, Nullable<int> userIDActual, Nullable<int> mainTaskID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            var tASKIDParameter = tASKID.HasValue ?
                new ObjectParameter("TASKID", tASKID) :
                new ObjectParameter("TASKID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var assignmentDateTimeParameter = assignmentDateTime.HasValue ?
                new ObjectParameter("AssignmentDateTime", assignmentDateTime) :
                new ObjectParameter("AssignmentDateTime", typeof(System.DateTime));
    
            var actualDurationParameter = actualDuration != null ?
                new ObjectParameter("ActualDuration", actualDuration) :
                new ObjectParameter("ActualDuration", typeof(string));
    
            var commentTextParameter = commentText != null ?
                new ObjectParameter("CommentText", commentText) :
                new ObjectParameter("CommentText", typeof(string));
    
            var billableHoursParameter = billableHours != null ?
                new ObjectParameter("BillableHours", billableHours) :
                new ObjectParameter("BillableHours", typeof(string));
    
            var isBillableApprovedParameter = isBillableApproved.HasValue ?
                new ObjectParameter("IsBillableApproved", isBillableApproved) :
                new ObjectParameter("IsBillableApproved", typeof(int));
    
            var userIDBillableParameter = userIDBillable.HasValue ?
                new ObjectParameter("UserIDBillable", userIDBillable) :
                new ObjectParameter("UserIDBillable", typeof(int));
    
            var isActualApprovedParameter = isActualApproved.HasValue ?
                new ObjectParameter("IsActualApproved", isActualApproved) :
                new ObjectParameter("IsActualApproved", typeof(int));
    
            var userIDActualParameter = userIDActual.HasValue ?
                new ObjectParameter("UserIDActual", userIDActual) :
                new ObjectParameter("UserIDActual", typeof(int));
    
            var mainTaskIDParameter = mainTaskID.HasValue ?
                new ObjectParameter("MainTaskID", mainTaskID) :
                new ObjectParameter("MainTaskID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_AddRecord", iDParameter, projectIDParameter, tASKIDParameter, userIDParameter, assignmentDateTimeParameter, actualDurationParameter, commentTextParameter, billableHoursParameter, isBillableApprovedParameter, userIDBillableParameter, isActualApprovedParameter, userIDActualParameter, mainTaskIDParameter);
        }
    
        public virtual ObjectResult<sp_GetMainTasksLazyLoading_Result> sp_GetMainTasksLazyLoading(Nullable<int> recsPerPage, Nullable<int> page)
        {
            var recsPerPageParameter = recsPerPage.HasValue ?
                new ObjectParameter("recsPerPage", recsPerPage) :
                new ObjectParameter("recsPerPage", typeof(int));
    
            var pageParameter = page.HasValue ?
                new ObjectParameter("page", page) :
                new ObjectParameter("page", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetMainTasksLazyLoading_Result>("sp_GetMainTasksLazyLoading", recsPerPageParameter, pageParameter);
        }
    
        public virtual int sp_SaveProjectMapping(Nullable<int> projectID)
        {
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("projectID", projectID) :
                new ObjectParameter("projectID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_SaveProjectMapping", projectIDParameter);
        }
    
        public virtual ObjectResult<sp_FetchProjectMappingMainTask_Result> sp_FetchProjectMappingMainTask(Nullable<int> maintaskid)
        {
            var maintaskidParameter = maintaskid.HasValue ?
                new ObjectParameter("maintaskid", maintaskid) :
                new ObjectParameter("maintaskid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_FetchProjectMappingMainTask_Result>("sp_FetchProjectMappingMainTask", maintaskidParameter);
        }
    
        public virtual int sp_SaveMainTaskMapping(Nullable<int> maintaskid)
        {
            var maintaskidParameter = maintaskid.HasValue ?
                new ObjectParameter("maintaskid", maintaskid) :
                new ObjectParameter("maintaskid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_SaveMainTaskMapping", maintaskidParameter);
        }
    
        public virtual ObjectResult<sp_SearchMainTask_Result> sp_SearchMainTask(string mainTaskName)
        {
            var mainTaskNameParameter = mainTaskName != null ?
                new ObjectParameter("MainTaskName", mainTaskName) :
                new ObjectParameter("MainTaskName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_SearchMainTask_Result>("sp_SearchMainTask", mainTaskNameParameter);
        }
    
        public virtual ObjectResult<sp_FilterUserProfileTable1_Result> sp_FilterUserProfileTable1(string fullName, string designation, string department, Nullable<bool> isActive, string accountType, string emailAddress)
        {
            var fullNameParameter = fullName != null ?
                new ObjectParameter("FullName", fullName) :
                new ObjectParameter("FullName", typeof(string));
    
            var designationParameter = designation != null ?
                new ObjectParameter("Designation", designation) :
                new ObjectParameter("Designation", typeof(string));
    
            var departmentParameter = department != null ?
                new ObjectParameter("Department", department) :
                new ObjectParameter("Department", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var accountTypeParameter = accountType != null ?
                new ObjectParameter("AccountType", accountType) :
                new ObjectParameter("AccountType", typeof(string));
    
            var emailAddressParameter = emailAddress != null ?
                new ObjectParameter("EmailAddress", emailAddress) :
                new ObjectParameter("EmailAddress", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_FilterUserProfileTable1_Result>("sp_FilterUserProfileTable1", fullNameParameter, designationParameter, departmentParameter, isActiveParameter, accountTypeParameter, emailAddressParameter);
        }
    
        public virtual ObjectResult<sp_CheckAssignedProject_Result> sp_CheckAssignedProject(Nullable<int> userID, Nullable<int> projectID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_CheckAssignedProject_Result>("sp_CheckAssignedProject", userIDParameter, projectIDParameter);
        }
    
        public virtual int sp_AddDesignation(Nullable<int> id, string designationName, Nullable<bool> isActive, Nullable<bool> isUpdate)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var designationNameParameter = designationName != null ?
                new ObjectParameter("DesignationName", designationName) :
                new ObjectParameter("DesignationName", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("isActive", isActive) :
                new ObjectParameter("isActive", typeof(bool));
    
            var isUpdateParameter = isUpdate.HasValue ?
                new ObjectParameter("isUpdate", isUpdate) :
                new ObjectParameter("isUpdate", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_AddDesignation", idParameter, designationNameParameter, isActiveParameter, isUpdateParameter);
        }
    
        public virtual ObjectResult<sp_GetDesignation_Result> sp_GetDesignation()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetDesignation_Result>("sp_GetDesignation");
        }
    
        public virtual int sp_DeleteDesignation(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DeleteDesignation", iDParameter);
        }
    
        public virtual ObjectResult<GetSetting_Update_Result> GetSetting_Update(string settingName)
        {
            var settingNameParameter = settingName != null ?
                new ObjectParameter("SettingName", settingName) :
                new ObjectParameter("SettingName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSetting_Update_Result>("GetSetting_Update", settingNameParameter);
        }
    
        public virtual int sp_AddUpdateClient(Nullable<int> id, string clientName, string contactNumber, string address, string website_URL, string facebooklink, string twitter, string instagramlink, Nullable<bool> isActive, string email)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var clientNameParameter = clientName != null ?
                new ObjectParameter("ClientName", clientName) :
                new ObjectParameter("ClientName", typeof(string));
    
            var contactNumberParameter = contactNumber != null ?
                new ObjectParameter("ContactNumber", contactNumber) :
                new ObjectParameter("ContactNumber", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var website_URLParameter = website_URL != null ?
                new ObjectParameter("Website_URL", website_URL) :
                new ObjectParameter("Website_URL", typeof(string));
    
            var facebooklinkParameter = facebooklink != null ?
                new ObjectParameter("Facebooklink", facebooklink) :
                new ObjectParameter("Facebooklink", typeof(string));
    
            var twitterParameter = twitter != null ?
                new ObjectParameter("Twitter", twitter) :
                new ObjectParameter("Twitter", typeof(string));
    
            var instagramlinkParameter = instagramlink != null ?
                new ObjectParameter("instagramlink", instagramlink) :
                new ObjectParameter("instagramlink", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("isActive", isActive) :
                new ObjectParameter("isActive", typeof(bool));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_AddUpdateClient", idParameter, clientNameParameter, contactNumberParameter, addressParameter, website_URLParameter, facebooklinkParameter, twitterParameter, instagramlinkParameter, isActiveParameter, emailParameter);
        }
    
        public virtual int sp_DeactiveUser(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DeactiveUser", userIDParameter);
        }
    
        public virtual ObjectResult<sp_UserProfileTableLogin_Result> sp_UserProfileTableLogin(string uSERNAME, string password)
        {
            var uSERNAMEParameter = uSERNAME != null ?
                new ObjectParameter("USERNAME", uSERNAME) :
                new ObjectParameter("USERNAME", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_UserProfileTableLogin_Result>("sp_UserProfileTableLogin", uSERNAMEParameter, passwordParameter);
        }
    
        public virtual ObjectResult<sp_GetResourceMapping_Result> sp_GetResourceMapping(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetResourceMapping_Result>("sp_GetResourceMapping", userIDParameter);
        }
    
        public virtual ObjectResult<sp_GetProjects_Result> sp_GetProjects(string projectName)
        {
            var projectNameParameter = projectName != null ?
                new ObjectParameter("ProjectName", projectName) :
                new ObjectParameter("ProjectName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetProjects_Result>("sp_GetProjects", projectNameParameter);
        }
    
        public virtual int sp_UpdateClientIDinProject(Nullable<int> clientID, Nullable<int> projectID)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(int));
    
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateClientIDinProject", clientIDParameter, projectIDParameter);
        }
    
        public virtual int sp_UpdateClientIDNull(Nullable<int> clientID)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateClientIDNull", clientIDParameter);
        }
    
        public virtual int sp_UpdateProjectClientID(Nullable<int> projectid, Nullable<int> clientID)
        {
            var projectidParameter = projectid.HasValue ?
                new ObjectParameter("projectid", projectid) :
                new ObjectParameter("projectid", typeof(int));
    
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateProjectClientID", projectidParameter, clientIDParameter);
        }
    
        public virtual ObjectResult<sp_GetClientLazyLoading_Result> sp_GetClientLazyLoading(Nullable<int> recsPerPage, Nullable<int> page)
        {
            var recsPerPageParameter = recsPerPage.HasValue ?
                new ObjectParameter("recsPerPage", recsPerPage) :
                new ObjectParameter("recsPerPage", typeof(int));
    
            var pageParameter = page.HasValue ?
                new ObjectParameter("page", page) :
                new ObjectParameter("page", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetClientLazyLoading_Result>("sp_GetClientLazyLoading", recsPerPageParameter, pageParameter);
        }
    
        public virtual ObjectResult<sp_GetClients_Result> sp_GetClients(string clientName, Nullable<bool> filter)
        {
            var clientNameParameter = clientName != null ?
                new ObjectParameter("ClientName", clientName) :
                new ObjectParameter("ClientName", typeof(string));
    
            var filterParameter = filter.HasValue ?
                new ObjectParameter("filter", filter) :
                new ObjectParameter("filter", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetClients_Result>("sp_GetClients", clientNameParameter, filterParameter);
        }
    
        public virtual int sp_GetDashboardStats(Nullable<System.DateTime> requestDate, Nullable<bool> isManagementTime)
        {
            var requestDateParameter = requestDate.HasValue ?
                new ObjectParameter("RequestDate", requestDate) :
                new ObjectParameter("RequestDate", typeof(System.DateTime));
    
            var isManagementTimeParameter = isManagementTime.HasValue ?
                new ObjectParameter("IsManagementTime", isManagementTime) :
                new ObjectParameter("IsManagementTime", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GetDashboardStats", requestDateParameter, isManagementTimeParameter);
        }
    
        public virtual ObjectResult<sp_GetDashboardStats_Update_Result> sp_GetDashboardStats_Update(Nullable<System.DateTime> requestStartDate, Nullable<System.DateTime> requestEndDate, Nullable<int> projectID, Nullable<bool> isManagementTime)
        {
            var requestStartDateParameter = requestStartDate.HasValue ?
                new ObjectParameter("RequestStartDate", requestStartDate) :
                new ObjectParameter("RequestStartDate", typeof(System.DateTime));
    
            var requestEndDateParameter = requestEndDate.HasValue ?
                new ObjectParameter("RequestEndDate", requestEndDate) :
                new ObjectParameter("RequestEndDate", typeof(System.DateTime));
    
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            var isManagementTimeParameter = isManagementTime.HasValue ?
                new ObjectParameter("IsManagementTime", isManagementTime) :
                new ObjectParameter("IsManagementTime", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetDashboardStats_Update_Result>("sp_GetDashboardStats_Update", requestStartDateParameter, requestEndDateParameter, projectIDParameter, isManagementTimeParameter);
        }
    
        public virtual ObjectResult<sp_GetProjects_Update_Result> sp_GetProjects_Update(string projectName)
        {
            var projectNameParameter = projectName != null ?
                new ObjectParameter("ProjectName", projectName) :
                new ObjectParameter("ProjectName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetProjects_Update_Result>("sp_GetProjects_Update", projectNameParameter);
        }
    
        public virtual int sp_InsertProjects_update(Nullable<int> iD, string name, string type, Nullable<decimal> estimatedHours, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string projectOwner, string projectDescription, Nullable<bool> isActive, Nullable<bool> isUpdateProjectBudget, Nullable<System.DateTime> projectBudgetYear, Nullable<decimal> contractHoursPerMonth, Nullable<decimal> contractHourJan, Nullable<decimal> contractHourFeb, Nullable<decimal> contractHourMar, Nullable<decimal> contractHourApr, Nullable<decimal> contractHourMay, Nullable<decimal> contractHourJune, Nullable<decimal> contractHourJul, Nullable<decimal> contractHourAug, Nullable<decimal> contractHourSep, Nullable<decimal> contractHourOct, Nullable<decimal> contractHourNov, Nullable<decimal> contractHourDec, Nullable<int> clientID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var estimatedHoursParameter = estimatedHours.HasValue ?
                new ObjectParameter("EstimatedHours", estimatedHours) :
                new ObjectParameter("EstimatedHours", typeof(decimal));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var projectOwnerParameter = projectOwner != null ?
                new ObjectParameter("ProjectOwner", projectOwner) :
                new ObjectParameter("ProjectOwner", typeof(string));
    
            var projectDescriptionParameter = projectDescription != null ?
                new ObjectParameter("ProjectDescription", projectDescription) :
                new ObjectParameter("ProjectDescription", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("isActive", isActive) :
                new ObjectParameter("isActive", typeof(bool));
    
            var isUpdateProjectBudgetParameter = isUpdateProjectBudget.HasValue ?
                new ObjectParameter("isUpdateProjectBudget", isUpdateProjectBudget) :
                new ObjectParameter("isUpdateProjectBudget", typeof(bool));
    
            var projectBudgetYearParameter = projectBudgetYear.HasValue ?
                new ObjectParameter("ProjectBudgetYear", projectBudgetYear) :
                new ObjectParameter("ProjectBudgetYear", typeof(System.DateTime));
    
            var contractHoursPerMonthParameter = contractHoursPerMonth.HasValue ?
                new ObjectParameter("ContractHoursPerMonth", contractHoursPerMonth) :
                new ObjectParameter("ContractHoursPerMonth", typeof(decimal));
    
            var contractHourJanParameter = contractHourJan.HasValue ?
                new ObjectParameter("ContractHourJan", contractHourJan) :
                new ObjectParameter("ContractHourJan", typeof(decimal));
    
            var contractHourFebParameter = contractHourFeb.HasValue ?
                new ObjectParameter("ContractHourFeb", contractHourFeb) :
                new ObjectParameter("ContractHourFeb", typeof(decimal));
    
            var contractHourMarParameter = contractHourMar.HasValue ?
                new ObjectParameter("ContractHourMar", contractHourMar) :
                new ObjectParameter("ContractHourMar", typeof(decimal));
    
            var contractHourAprParameter = contractHourApr.HasValue ?
                new ObjectParameter("ContractHourApr", contractHourApr) :
                new ObjectParameter("ContractHourApr", typeof(decimal));
    
            var contractHourMayParameter = contractHourMay.HasValue ?
                new ObjectParameter("ContractHourMay", contractHourMay) :
                new ObjectParameter("ContractHourMay", typeof(decimal));
    
            var contractHourJuneParameter = contractHourJune.HasValue ?
                new ObjectParameter("ContractHourJune", contractHourJune) :
                new ObjectParameter("ContractHourJune", typeof(decimal));
    
            var contractHourJulParameter = contractHourJul.HasValue ?
                new ObjectParameter("ContractHourJul", contractHourJul) :
                new ObjectParameter("ContractHourJul", typeof(decimal));
    
            var contractHourAugParameter = contractHourAug.HasValue ?
                new ObjectParameter("ContractHourAug", contractHourAug) :
                new ObjectParameter("ContractHourAug", typeof(decimal));
    
            var contractHourSepParameter = contractHourSep.HasValue ?
                new ObjectParameter("ContractHourSep", contractHourSep) :
                new ObjectParameter("ContractHourSep", typeof(decimal));
    
            var contractHourOctParameter = contractHourOct.HasValue ?
                new ObjectParameter("ContractHourOct", contractHourOct) :
                new ObjectParameter("ContractHourOct", typeof(decimal));
    
            var contractHourNovParameter = contractHourNov.HasValue ?
                new ObjectParameter("ContractHourNov", contractHourNov) :
                new ObjectParameter("ContractHourNov", typeof(decimal));
    
            var contractHourDecParameter = contractHourDec.HasValue ?
                new ObjectParameter("ContractHourDec", contractHourDec) :
                new ObjectParameter("ContractHourDec", typeof(decimal));
    
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertProjects_update", iDParameter, nameParameter, typeParameter, estimatedHoursParameter, startDateParameter, endDateParameter, projectOwnerParameter, projectDescriptionParameter, isActiveParameter, isUpdateProjectBudgetParameter, projectBudgetYearParameter, contractHoursPerMonthParameter, contractHourJanParameter, contractHourFebParameter, contractHourMarParameter, contractHourAprParameter, contractHourMayParameter, contractHourJuneParameter, contractHourJulParameter, contractHourAugParameter, contractHourSepParameter, contractHourOctParameter, contractHourNovParameter, contractHourDecParameter, clientIDParameter);
        }
    
        public virtual ObjectResult<sp_GetProjectWithPercentage_Result> sp_GetProjectWithPercentage(Nullable<int> taskownerID)
        {
            var taskownerIDParameter = taskownerID.HasValue ?
                new ObjectParameter("TaskownerID", taskownerID) :
                new ObjectParameter("TaskownerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetProjectWithPercentage_Result>("sp_GetProjectWithPercentage", taskownerIDParameter);
        }
    
        public virtual int sp_InsertSetting_Update(Nullable<bool> mODE, Nullable<int> iD, string nAME, string vALUE, string uSERNAME, string settingType, string settingDescription)
        {
            var mODEParameter = mODE.HasValue ?
                new ObjectParameter("MODE", mODE) :
                new ObjectParameter("MODE", typeof(bool));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nAMEParameter = nAME != null ?
                new ObjectParameter("NAME", nAME) :
                new ObjectParameter("NAME", typeof(string));
    
            var vALUEParameter = vALUE != null ?
                new ObjectParameter("VALUE", vALUE) :
                new ObjectParameter("VALUE", typeof(string));
    
            var uSERNAMEParameter = uSERNAME != null ?
                new ObjectParameter("USERNAME", uSERNAME) :
                new ObjectParameter("USERNAME", typeof(string));
    
            var settingTypeParameter = settingType != null ?
                new ObjectParameter("SettingType", settingType) :
                new ObjectParameter("SettingType", typeof(string));
    
            var settingDescriptionParameter = settingDescription != null ?
                new ObjectParameter("SettingDescription", settingDescription) :
                new ObjectParameter("SettingDescription", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertSetting_Update", mODEParameter, iDParameter, nAMEParameter, vALUEParameter, uSERNAMEParameter, settingTypeParameter, settingDescriptionParameter);
        }
    
        public virtual ObjectResult<Get_ProjectDescription_Result> Get_ProjectDescription()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get_ProjectDescription_Result>("Get_ProjectDescription");
        }
    
        public virtual ObjectResult<sp_FetchUserMappingProject_Result> sp_FetchUserMappingProject(Nullable<int> projectid)
        {
            var projectidParameter = projectid.HasValue ?
                new ObjectParameter("projectid", projectid) :
                new ObjectParameter("projectid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_FetchUserMappingProject_Result>("sp_FetchUserMappingProject", projectidParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> sp_CheckUserHours(Nullable<int> userID, Nullable<int> projectID, Nullable<System.DateTime> assignmentDateTime)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            var assignmentDateTimeParameter = assignmentDateTime.HasValue ?
                new ObjectParameter("AssignmentDateTime", assignmentDateTime) :
                new ObjectParameter("AssignmentDateTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("sp_CheckUserHours", userIDParameter, projectIDParameter, assignmentDateTimeParameter);
        }
    
        public virtual ObjectResult<sp_CheckMainTaskSubTask_Result> sp_CheckMainTaskSubTask(Nullable<int> maintaskID, Nullable<int> subTaskID)
        {
            var maintaskIDParameter = maintaskID.HasValue ?
                new ObjectParameter("MaintaskID", maintaskID) :
                new ObjectParameter("MaintaskID", typeof(int));
    
            var subTaskIDParameter = subTaskID.HasValue ?
                new ObjectParameter("SubTaskID", subTaskID) :
                new ObjectParameter("SubTaskID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_CheckMainTaskSubTask_Result>("sp_CheckMainTaskSubTask", maintaskIDParameter, subTaskIDParameter);
        }
    
        public virtual ObjectResult<sp_ForgetPassword_Result> sp_ForgetPassword(string emailAddress)
        {
            var emailAddressParameter = emailAddress != null ?
                new ObjectParameter("EmailAddress", emailAddress) :
                new ObjectParameter("EmailAddress", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ForgetPassword_Result>("sp_ForgetPassword", emailAddressParameter);
        }
    
        public virtual ObjectResult<sp_GetDashboardStats_Update_AllProject_Result> sp_GetDashboardStats_Update_AllProject(Nullable<int> projectID)
        {
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetDashboardStats_Update_AllProject_Result>("sp_GetDashboardStats_Update_AllProject", projectIDParameter);
        }
    
        public virtual ObjectResult<sp_GetDepartment_Result> sp_GetDepartment()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetDepartment_Result>("sp_GetDepartment");
        }
    
        public virtual int sp_AddUpdateDepartment(Nullable<int> id, string departmentName, Nullable<bool> isActive)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var departmentNameParameter = departmentName != null ?
                new ObjectParameter("DepartmentName", departmentName) :
                new ObjectParameter("DepartmentName", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("isActive", isActive) :
                new ObjectParameter("isActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_AddUpdateDepartment", idParameter, departmentNameParameter, isActiveParameter);
        }
    
        public virtual int sp_DeleteDepartment(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DeleteDepartment", idParameter);
        }
    
        public virtual ObjectResult<sp_GetProjectDatabyID_Result> sp_GetProjectDatabyID(Nullable<System.DateTime> requestStartDate, Nullable<System.DateTime> requestEndDate, Nullable<int> projectID, Nullable<bool> isManagementTime)
        {
            var requestStartDateParameter = requestStartDate.HasValue ?
                new ObjectParameter("RequestStartDate", requestStartDate) :
                new ObjectParameter("RequestStartDate", typeof(System.DateTime));
    
            var requestEndDateParameter = requestEndDate.HasValue ?
                new ObjectParameter("RequestEndDate", requestEndDate) :
                new ObjectParameter("RequestEndDate", typeof(System.DateTime));
    
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            var isManagementTimeParameter = isManagementTime.HasValue ?
                new ObjectParameter("IsManagementTime", isManagementTime) :
                new ObjectParameter("IsManagementTime", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetProjectDatabyID_Result>("sp_GetProjectDatabyID", requestStartDateParameter, requestEndDateParameter, projectIDParameter, isManagementTimeParameter);
        }
    
        public virtual ObjectResult<sp_GetDepartmentLazyLoading_Result> sp_GetDepartmentLazyLoading(Nullable<int> recsPerPage, Nullable<int> page)
        {
            var recsPerPageParameter = recsPerPage.HasValue ?
                new ObjectParameter("recsPerPage", recsPerPage) :
                new ObjectParameter("recsPerPage", typeof(int));
    
            var pageParameter = page.HasValue ?
                new ObjectParameter("page", page) :
                new ObjectParameter("page", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetDepartmentLazyLoading_Result>("sp_GetDepartmentLazyLoading", recsPerPageParameter, pageParameter);
        }
    
        public virtual int sp_DeleteDepartmentMapping(Nullable<int> departmentID)
        {
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DeleteDepartmentMapping", departmentIDParameter);
        }
    
        public virtual ObjectResult<sp_FilterUserProfileTable_Result> sp_FilterUserProfileTable(string fullName, string designation, string department, Nullable<bool> isActive, string accountType, string emailAddress)
        {
            var fullNameParameter = fullName != null ?
                new ObjectParameter("FullName", fullName) :
                new ObjectParameter("FullName", typeof(string));
    
            var designationParameter = designation != null ?
                new ObjectParameter("Designation", designation) :
                new ObjectParameter("Designation", typeof(string));
    
            var departmentParameter = department != null ?
                new ObjectParameter("Department", department) :
                new ObjectParameter("Department", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var accountTypeParameter = accountType != null ?
                new ObjectParameter("AccountType", accountType) :
                new ObjectParameter("AccountType", typeof(string));
    
            var emailAddressParameter = emailAddress != null ?
                new ObjectParameter("EmailAddress", emailAddress) :
                new ObjectParameter("EmailAddress", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_FilterUserProfileTable_Result>("sp_FilterUserProfileTable", fullNameParameter, designationParameter, departmentParameter, isActiveParameter, accountTypeParameter, emailAddressParameter);
        }
    
        public virtual int sp_InserUserProfileTable(Nullable<int> userProfileTableID, string username, string fullName, string designation, string department, Nullable<bool> isActive, string accountType, string emailAddress, Nullable<System.DateTime> joiningDate)
        {
            var userProfileTableIDParameter = userProfileTableID.HasValue ?
                new ObjectParameter("UserProfileTableID", userProfileTableID) :
                new ObjectParameter("UserProfileTableID", typeof(int));
    
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var fullNameParameter = fullName != null ?
                new ObjectParameter("FullName", fullName) :
                new ObjectParameter("FullName", typeof(string));
    
            var designationParameter = designation != null ?
                new ObjectParameter("Designation", designation) :
                new ObjectParameter("Designation", typeof(string));
    
            var departmentParameter = department != null ?
                new ObjectParameter("Department", department) :
                new ObjectParameter("Department", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var accountTypeParameter = accountType != null ?
                new ObjectParameter("AccountType", accountType) :
                new ObjectParameter("AccountType", typeof(string));
    
            var emailAddressParameter = emailAddress != null ?
                new ObjectParameter("EmailAddress", emailAddress) :
                new ObjectParameter("EmailAddress", typeof(string));
    
            var joiningDateParameter = joiningDate.HasValue ?
                new ObjectParameter("JoiningDate", joiningDate) :
                new ObjectParameter("JoiningDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InserUserProfileTable", userProfileTableIDParameter, usernameParameter, fullNameParameter, designationParameter, departmentParameter, isActiveParameter, accountTypeParameter, emailAddressParameter, joiningDateParameter);
        }
    
        public virtual ObjectResult<Get_DefaultMaintask_Result> Get_DefaultMaintask(Nullable<bool> status)
        {
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get_DefaultMaintask_Result>("Get_DefaultMaintask", statusParameter);
        }
    
        public virtual ObjectResult<Get_MapMainTaskinDepartmentMapping_Result> Get_MapMainTaskinDepartmentMapping(Nullable<int> deptID)
        {
            var deptIDParameter = deptID.HasValue ?
                new ObjectParameter("DeptID", deptID) :
                new ObjectParameter("DeptID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get_MapMainTaskinDepartmentMapping_Result>("Get_MapMainTaskinDepartmentMapping", deptIDParameter);
        }
    
        public virtual int sp_InsertDepartmentMapping(Nullable<int> departID, Nullable<int> maintaskID, Nullable<bool> additionalCheck)
        {
            var departIDParameter = departID.HasValue ?
                new ObjectParameter("DepartID", departID) :
                new ObjectParameter("DepartID", typeof(int));
    
            var maintaskIDParameter = maintaskID.HasValue ?
                new ObjectParameter("MaintaskID", maintaskID) :
                new ObjectParameter("MaintaskID", typeof(int));
    
            var additionalCheckParameter = additionalCheck.HasValue ?
                new ObjectParameter("AdditionalCheck", additionalCheck) :
                new ObjectParameter("AdditionalCheck", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertDepartmentMapping", departIDParameter, maintaskIDParameter, additionalCheckParameter);
        }
    
        public virtual ObjectResult<sp_GetUserProfileTable_Result> sp_GetUserProfileTable(Nullable<int> userID, Nullable<int> departmentID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetUserProfileTable_Result>("sp_GetUserProfileTable", userIDParameter, departmentIDParameter);
        }
    
        public virtual ObjectResult<sp_GetMappedMainTaskinReportGrid_Result> sp_GetMappedMainTaskinReportGrid(Nullable<int> departID)
        {
            var departIDParameter = departID.HasValue ?
                new ObjectParameter("departID", departID) :
                new ObjectParameter("departID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetMappedMainTaskinReportGrid_Result>("sp_GetMappedMainTaskinReportGrid", departIDParameter);
        }
    
        public virtual ObjectResult<sp_GetMappedMainTask_Result> sp_GetMappedMainTask(Nullable<int> projectID)
        {
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetMappedMainTask_Result>("sp_GetMappedMainTask", projectIDParameter);
        }
    
        public virtual ObjectResult<sp_GetMappedMainTaskByProjectID_DepartmentID_Result> sp_GetMappedMainTaskByProjectID_DepartmentID(Nullable<int> projectID, Nullable<int> departID, string accountType)
        {
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            var departIDParameter = departID.HasValue ?
                new ObjectParameter("departID", departID) :
                new ObjectParameter("departID", typeof(int));
    
            var accountTypeParameter = accountType != null ?
                new ObjectParameter("AccountType", accountType) :
                new ObjectParameter("AccountType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetMappedMainTaskByProjectID_DepartmentID_Result>("sp_GetMappedMainTaskByProjectID_DepartmentID", projectIDParameter, departIDParameter, accountTypeParameter);
        }
    
        public virtual int sp_AddTasks(Nullable<int> iD, Nullable<int> phase, string taskName, string projectName, string taskTypeName, Nullable<decimal> estimatedDuration, Nullable<int> mainTaskId, string comments)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var phaseParameter = phase.HasValue ?
                new ObjectParameter("Phase", phase) :
                new ObjectParameter("Phase", typeof(int));
    
            var taskNameParameter = taskName != null ?
                new ObjectParameter("TaskName", taskName) :
                new ObjectParameter("TaskName", typeof(string));
    
            var projectNameParameter = projectName != null ?
                new ObjectParameter("ProjectName", projectName) :
                new ObjectParameter("ProjectName", typeof(string));
    
            var taskTypeNameParameter = taskTypeName != null ?
                new ObjectParameter("TaskTypeName", taskTypeName) :
                new ObjectParameter("TaskTypeName", typeof(string));
    
            var estimatedDurationParameter = estimatedDuration.HasValue ?
                new ObjectParameter("EstimatedDuration", estimatedDuration) :
                new ObjectParameter("EstimatedDuration", typeof(decimal));
    
            var mainTaskIdParameter = mainTaskId.HasValue ?
                new ObjectParameter("MainTaskId", mainTaskId) :
                new ObjectParameter("MainTaskId", typeof(int));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_AddTasks", iDParameter, phaseParameter, taskNameParameter, projectNameParameter, taskTypeNameParameter, estimatedDurationParameter, mainTaskIdParameter, commentsParameter);
        }
    
        public virtual ObjectResult<sp_GetTasks_Result> sp_GetTasks(string taskName, Nullable<int> projectID, Nullable<int> mainTaskID)
        {
            var taskNameParameter = taskName != null ?
                new ObjectParameter("TaskName", taskName) :
                new ObjectParameter("TaskName", typeof(string));
    
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            var mainTaskIDParameter = mainTaskID.HasValue ?
                new ObjectParameter("MainTaskID", mainTaskID) :
                new ObjectParameter("MainTaskID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetTasks_Result>("sp_GetTasks", taskNameParameter, projectIDParameter, mainTaskIDParameter);
        }
    
        public virtual ObjectResult<sp_TotalHoursOfProjects_New_Result> sp_TotalHoursOfProjects_New(Nullable<int> projectId, string taskName, string taskOwnerId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> taskType, string isApproved, Nullable<int> mainTaskID, Nullable<int> subTaskID, Nullable<int> departmentID)
        {
            var projectIdParameter = projectId.HasValue ?
                new ObjectParameter("ProjectId", projectId) :
                new ObjectParameter("ProjectId", typeof(int));
    
            var taskNameParameter = taskName != null ?
                new ObjectParameter("TaskName", taskName) :
                new ObjectParameter("TaskName", typeof(string));
    
            var taskOwnerIdParameter = taskOwnerId != null ?
                new ObjectParameter("TaskOwnerId", taskOwnerId) :
                new ObjectParameter("TaskOwnerId", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var taskTypeParameter = taskType.HasValue ?
                new ObjectParameter("TaskType", taskType) :
                new ObjectParameter("TaskType", typeof(int));
    
            var isApprovedParameter = isApproved != null ?
                new ObjectParameter("IsApproved", isApproved) :
                new ObjectParameter("IsApproved", typeof(string));
    
            var mainTaskIDParameter = mainTaskID.HasValue ?
                new ObjectParameter("MainTaskID", mainTaskID) :
                new ObjectParameter("MainTaskID", typeof(int));
    
            var subTaskIDParameter = subTaskID.HasValue ?
                new ObjectParameter("SubTaskID", subTaskID) :
                new ObjectParameter("SubTaskID", typeof(int));
    
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_TotalHoursOfProjects_New_Result>("sp_TotalHoursOfProjects_New", projectIdParameter, taskNameParameter, taskOwnerIdParameter, fromDateParameter, toDateParameter, taskTypeParameter, isApprovedParameter, mainTaskIDParameter, subTaskIDParameter, departmentIDParameter);
        }
    
        public virtual int sp_GetFormattedTaskDataForReport(Nullable<int> projectid, Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, string resourceid, Nullable<int> taskid, Nullable<bool> billable, Nullable<bool> dateRangeFormat, Nullable<bool> actual, Nullable<int> subtaskid, Nullable<int> departmentid)
        {
            var projectidParameter = projectid.HasValue ?
                new ObjectParameter("projectid", projectid) :
                new ObjectParameter("projectid", typeof(int));
    
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var resourceidParameter = resourceid != null ?
                new ObjectParameter("resourceid", resourceid) :
                new ObjectParameter("resourceid", typeof(string));
    
            var taskidParameter = taskid.HasValue ?
                new ObjectParameter("taskid", taskid) :
                new ObjectParameter("taskid", typeof(int));
    
            var billableParameter = billable.HasValue ?
                new ObjectParameter("billable", billable) :
                new ObjectParameter("billable", typeof(bool));
    
            var dateRangeFormatParameter = dateRangeFormat.HasValue ?
                new ObjectParameter("DateRangeFormat", dateRangeFormat) :
                new ObjectParameter("DateRangeFormat", typeof(bool));
    
            var actualParameter = actual.HasValue ?
                new ObjectParameter("Actual", actual) :
                new ObjectParameter("Actual", typeof(bool));
    
            var subtaskidParameter = subtaskid.HasValue ?
                new ObjectParameter("Subtaskid", subtaskid) :
                new ObjectParameter("Subtaskid", typeof(int));
    
            var departmentidParameter = departmentid.HasValue ?
                new ObjectParameter("Departmentid", departmentid) :
                new ObjectParameter("Departmentid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GetFormattedTaskDataForReport", projectidParameter, fromdateParameter, todateParameter, resourceidParameter, taskidParameter, billableParameter, dateRangeFormatParameter, actualParameter, subtaskidParameter, departmentidParameter);
        }
    
        public virtual ObjectResult<sp_GetAssignments_New_Result> sp_GetAssignments_New(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<bool> isApproved, string userID, Nullable<int> mainTaskID, Nullable<int> projectID, Nullable<int> subTaskID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var isApprovedParameter = isApproved.HasValue ?
                new ObjectParameter("isApproved", isApproved) :
                new ObjectParameter("isApproved", typeof(bool));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            var mainTaskIDParameter = mainTaskID.HasValue ?
                new ObjectParameter("MainTaskID", mainTaskID) :
                new ObjectParameter("MainTaskID", typeof(int));
    
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            var subTaskIDParameter = subTaskID.HasValue ?
                new ObjectParameter("SubTaskID", subTaskID) :
                new ObjectParameter("SubTaskID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetAssignments_New_Result>("sp_GetAssignments_New", fromDateParameter, toDateParameter, isApprovedParameter, userIDParameter, mainTaskIDParameter, projectIDParameter, subTaskIDParameter);
        }
    
        public virtual ObjectResult<sp_DifferenceHours_Result> sp_DifferenceHours(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<bool> isApproved, string userID, Nullable<int> mainTaskID, Nullable<int> projectID, Nullable<int> subTaskID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var isApprovedParameter = isApproved.HasValue ?
                new ObjectParameter("isApproved", isApproved) :
                new ObjectParameter("isApproved", typeof(bool));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            var mainTaskIDParameter = mainTaskID.HasValue ?
                new ObjectParameter("MainTaskID", mainTaskID) :
                new ObjectParameter("MainTaskID", typeof(int));
    
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            var subTaskIDParameter = subTaskID.HasValue ?
                new ObjectParameter("SubTaskID", subTaskID) :
                new ObjectParameter("SubTaskID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_DifferenceHours_Result>("sp_DifferenceHours", fromDateParameter, toDateParameter, isApprovedParameter, userIDParameter, mainTaskIDParameter, projectIDParameter, subTaskIDParameter);
        }
    
        public virtual int sp_GetFormattedTaskDataForReportGriddifference(Nullable<int> projectid, Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, string resourceid, Nullable<int> taskid, Nullable<bool> billable, Nullable<bool> dateRangeFormat, Nullable<bool> actual, Nullable<int> subtaskid, Nullable<int> departmentid)
        {
            var projectidParameter = projectid.HasValue ?
                new ObjectParameter("projectid", projectid) :
                new ObjectParameter("projectid", typeof(int));
    
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var resourceidParameter = resourceid != null ?
                new ObjectParameter("resourceid", resourceid) :
                new ObjectParameter("resourceid", typeof(string));
    
            var taskidParameter = taskid.HasValue ?
                new ObjectParameter("taskid", taskid) :
                new ObjectParameter("taskid", typeof(int));
    
            var billableParameter = billable.HasValue ?
                new ObjectParameter("billable", billable) :
                new ObjectParameter("billable", typeof(bool));
    
            var dateRangeFormatParameter = dateRangeFormat.HasValue ?
                new ObjectParameter("DateRangeFormat", dateRangeFormat) :
                new ObjectParameter("DateRangeFormat", typeof(bool));
    
            var actualParameter = actual.HasValue ?
                new ObjectParameter("Actual", actual) :
                new ObjectParameter("Actual", typeof(bool));
    
            var subtaskidParameter = subtaskid.HasValue ?
                new ObjectParameter("Subtaskid", subtaskid) :
                new ObjectParameter("Subtaskid", typeof(int));
    
            var departmentidParameter = departmentid.HasValue ?
                new ObjectParameter("Departmentid", departmentid) :
                new ObjectParameter("Departmentid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GetFormattedTaskDataForReportGriddifference", projectidParameter, fromdateParameter, todateParameter, resourceidParameter, taskidParameter, billableParameter, dateRangeFormatParameter, actualParameter, subtaskidParameter, departmentidParameter);
        }
    }
}
